# 2018-05-18  William A. Hudson

# rgpio -- Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgpio -- Raspberry Pi GPIO utility

=head1		SYNOPSIS

 usage:  rgpio [main_options..]  feature  [options..]
  common:
    info         RPi Revision Information
    man          reference manuals
    header       Pin Function, by pin number on 40-pin header
  RPi4 and earlier:
    fsel         IO Function Select
    io           General Purpose IO pins
    clk          Clock generator
    iic          I2C Master
    pwm          PWM Pulse Width Modulator
    spi0         SPI0 Master
    timer        System Timer
    uspi         Universal SPI Master, Spi1, Spi2
    pads         Pads Control
    pud          Pin Pull-Up/Down - RPi3 and earlier
    pull         Pin Pull-Up/Down - RPi4 only
  RPi5 only:
    fsel5        IO Function Select
    rio          Register IO
    rpad         IO Pad control
  main options:
    --dev=m|g|f         device file type, m= /dev/mem (default),
                                          g= /dev/gpiomem, f= fake
    --rpi3              simulate RPi3 or earlier
    --rpi4              simulate RPi4
    --rpi5              simulate RPi5
    -n, --sim           simulate appropriate platform (dry run)
    --help              show this usage
    -v, --verbose       verbose output, show if fake memory
    --debug             debug output
    --version           show version info
  (options with GNU= only)


=head1		DESCRIPTION

This is a low-level utility program for inspecting and modifying the
GPIO Peripheral registers on the Raspberry Pi (RPi).
It uses the B<librgpio> library and naming conventions.
It is intended to be very close to the hardware interface and not intended to
provide a high-level abstraction.

It is a cockpit command, with sub-commands for each peripheral feature.

=head2			Essential Operation

The main program opens the device file /dev/mem and then calls the specified
sub-command (Feature) which then calls mmap(2) to map a portion of the real
IO memory space into the virtual memory space of the running process.
The result is any loads and stores to this virtual space go to the actual
hardware registers.

Modification of an IO register is typically by a read/modify/write process,
so that only the bits being modified are changed.  This process is NOT
atomic.  It is left to the user to manage any synchronization problems that
may arise from parallel asynchronous processes.

=head2			Simulation, Fake Memory

In simulation, the block of IO memory is replaced by a block of normal program
memory (referred to as "fake memory") in B<rgAddrMap>.  In this way all the
sub-commands can operate as before, but not actually affect any hardware.
The hardware behavior is NOT simulated, so whatever is written to a register
is read back unmodified.  e.g. A hardware register that clears bits when
written with 1, will instead read back as 1, not 0.

These simulated registers are not persistent between command invocations.
Each run of the command starts with fake memory initialized to zero.

=head2			Privilege Capabilities

The B<librgpio> library applies the "capabilities" system to provide access
to /dev/mem for normal users without using 'sudo' or applying "setuid root"
to the executable.  See capabilities(7).

Capabilities 'CAP_DAC_OVERRIDE' and 'CAP_SYS_RAWIO' are necessary to access
/dev/mem.  These are applied to the "Permitted file capability set" of the
executable file.  When the file is executed, the program raises those two
capabilities into the process "Effective" set, opens /dev/mem, and then
drops all capabilities.  In this way the executing process has no special
capability before or after the code section doing the raise/open/drop
operation (i.e. outside of the B<librgpio> rgAddrMap::open_dev_file() function).

=head2			Raspberry Pi Versions

This tool was developed on RPi3, and later extended for RPi4 and RPi5.

It deduces the RPi version by decoding the "Revision" line in the
/proc/cpuinfo file.  See rgRpiRev(3).
A failed deduction assumes the platform is non-RPi and falls back to fake
memory simulation.

RPi3 (BCM2837) and earlier all have the same peripheral feature set as the
original BCM2835 chip.

RPi4 (BCM2711) introduced additional instances of IIC, SPI, UART, and changed
how pin pull up/down was accessed.
It kept the same register IO offset addresses.

RPi5 (BCM2712) using the new RP1 peripheral chip changed pretty much
everything - both the register structure and the documentation addresses.

=head1		OPTIONS

The B<rgpio> program has the following options.
Any options after the sub-command are processed by the sub-command.

=over

=item B<--dev=m|g|f>        - Device file type.

m= /dev/mem (default), g= /dev/gpiomem, f= fake memory.
This is the device special file used to map blocks of IO memory into the
process.

=item B<--rpi3>             - Simulate RPi3 or earlier.

=item B<--rpi4>             - Simulate RPi4.

=item B<--rpi5>             - Simulate RPi5.

These options force simulation (fake memory) of the specified RPi platform.
They override the SocEnum chip identification to allow exploring features of
other Raspberry Pi versions.

=item B<-n>, B<--sim>       - Simulate appropriate platform (dry run).

Simulate the platform appropriate for the given sub-command, essentially
making like a dry run.  This allows exploring commands for any of the RPi
platforms.
On a non-RPi the default platform is RPi0 (BCM2835).

=item B<--debug>            - Debug output.

Show the capability raise/lower actions when opening /dev/mem.
Show the RPi B<SocEnum> and B<BaseAddr> - see rgRpiRev(3).

=item B<--help>             - Show main program help.

Show fall-back to fake memory.

=item B<--version>          - Show version information.

=back

Note options --help and --debug are different when applied to the main
command or the sub-command.


=head1		COMMANDS

Each command operates a peripheral feature of the Raspberry Pi SOC (System
On a Chip) using the register and field naming of the corresponding
B<librgpio> class.

	  man(1)     man(3),man(7)
 Command  Manpage      Class        Description
 ------- ----------    ---------    -------------------------------
 clk     rgpio-clk     rgClk        Clock generators
 fsel    rgpio-fsel    rgFselPin    IO Function Select
 fsel5   rgpio-fsel5   rgsIoCon     IO Function Select - RPi5
 header  rgpio-header  rgHeaderPin  Pin Function on 40-pin header
 iic     rgpio-iic     rgIic        I2C Master
 info    rgpio-info    rgRpiRev     RPi Revision Information
 io      rgpio-io      rgIoPins     General Purpose IO pins
 man     rgpio-man     --           reference manuals
 pads    rgpio-pads    rgPads       Pads Control
 pud     rgpio-pud     rgPudPin     Pin Pull-Up/Down - RPi3 and earlier
 pull    rgpio-pull    rgPullPin    Pin Pull-Up/Down - RPi4
 pwm     rgpio-pwm     rgPwm        PWM Pulse Width Modulator
 rio     rgpio-rio     rgsRio       Register IO - RPi5
 rpad    rgpio-rpad    rgsIoPads    IO Pad control - RPi5
 spi0    rgpio-spi0    rgSpi0       SPI0 Master
 timer   rgpio-timer   rgSysTimer   System Timer
 uspi    rgpio-uspi    rgUniSpi     Universal SPI Master SPI1, SPI2

View man pages with the 'B<rgpio man>' command:  e.g.

 % rgpio man rgpio-clk	# command  man(1)
 % rgpio man   rgClk	# class    man(3)
 % rgpio man 7 rgClk	# hardware man(7)

There are three man pages associated with each command feature, divided
into the three manual sections as above.
Section (1) describes the command, while section (3) describes the B<librgpio>
class used by that command.  Section (7) describes the hardware operation.


=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES

 Main command help.
 % rgpio --help

 Sub command help.
 % rgpio io --help

 List available man pages.
 % rgpio man --list

 Normal call to a sub-command using /dev/mem (default).
 % rgpio io

 Simulate RPi4 (fake memory) while running on any platform.
 % rgpio --rpi4  pull

 Force fake memory, to explore without touching hardware.
 % rgpio --dev=f -v  io
 % rgpio --sim   -v  io

 Only open the device file, no sub-command.
 % rgpio --dev=g --debug


=head1		TROUBLESHOOTING

=head2			Capabilities not set on the rgpio executable.

Generally errors like:  "cannot open /dev/mem:  Permission denied"

 View existing capabilities:
 % getcap  ../bin/rgpio

 Set necessary capabilities:  (requires root permission)
 % sudo setcap 'CAP_DAC_OVERRIDE,CAP_SYS_RAWIO=p'  ../bin/rgpio

=head2			Wrong device file for feature.

Most features (sub-commands) require /dev/mem for correct operation.
If /dev/gpiomem is used instead, they may silently do nothing, e.g. all
values appear stuck zero.

Device /dev/gpiomem is really only usable with the GPIO pin features, i.e.
sub-commands B<fsel>, B<header>, B<io>, B<pud>, and B<pull>.


=head1		ENVIRONMENT

none


=head1		FILES

 /dev/mem	Kernel memory map.
    Allows access to all peripheral features.

 /dev/gpiomem	Kernel memory map for parallel GPIO pins.
    Allows access for normal users belonging to group 'gpio'.

 /proc/cpuinfo	Read for RPi "Revision" code.


=head1		SEE ALSO

B<librgpio>(3)
B<rgRpiRev>(3)
B<rgAddrMap>(3)
B<capabilities>(7)
B<setcap>(8)

=cut

