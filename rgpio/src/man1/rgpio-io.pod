# 2018-05-21  William A. Hudson

# rgpio-io -- Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgpio-io -- IO Pin register access

=head1		SYNOPSIS

 rgpio io [options..]  [reg..]
    reg                 register name, as shown with --all
  register groups:  (accumulate)
    -0, --w0            pin Level, Event, Detect word 0 (default)
    -1, --w1            pin Level, Event, Detect word 1
    --fsel              Fsel function select registers
    --pud               pin Pull-Up/Down program registers
    --all               all registers above
  register group modifiers on --w0 --w1:
    --raw               show real instead of virtual PinLevel_w0
  modify:  (32-bit values)
    --set=0xff..        set mask bits
    --clr=0xff..        clear mask bits
    --mask=0xff..       mask to select bits of --value
    --value=0x00..      bit values selected by --mask
  options:
    --help              show this usage
    -v, --verbose       verbose output, show registers in binary
    --debug             debug output
  (options with GNU= only)


=head1		DESCRIPTION

This command provides access to the set of pin GPIO registers.  All registers
are 32-bits wide, and may contain reserved fields.

Register names are the same as in the "rgIoPins" class
(see file rgIoPins.h) and are listed in the register group options below.
The names are a little long, but aid in the use of the librgpio library.

The default operation is to directly read and display the specified registers.
Reading these IO registers has no side effects, and so is generally safe.

If modification is requested, the process for read/write registers is:

    1) Read current hardware register value.
    2) Modify bits according to mask.
    3) Write modified value back to hardware register.
    4) Read hardware register and display resulting value.

For registers that set/clear bits on write, the process is:
    1) Write bits according to --set or --clr mask.
    2) Read hardware register and display resulting value.

This command is intended to provide raw register access, and does not
provide higher level compound operations.

Register function is described in BCM doc, or B<rgIoPins>(7).

Note:  The IO lines (and these registers) are typically a shared resource
among multiple asynchronous processes, where each process may use only a few
lines (bits).
The read-modify-write process of updating registers is not atomic.
Therefor a synchronization problem exists, and is typically solved by
externally synchronizing the processes.

Note:  The IO line output register is updated by writing 1-bits to PinSet_w0
or PinClr_w0.  This bit-slice update IS atomic.

=head1		OPTIONS

=head2			Register Groups

These options are an alias for a list of registers.  Multiple register
groups can be specified or combined with individual registers.  Duplicate
registers are removed.

=over

=item B<-0, --w0>           - Register set word 0.  (default)

 PinLevel_w0            (virtual read-write)
 EventStatus_w0         (read-clear)
 DetectRise_w0
 DetectFall_w0
 DetectHigh_w0
 DetectLow_w0
 DetectAsyncRise_w0
 DetectAsyncFall_w0

Bits [31:0] correspond to IO lines [31:0].
Note that only bits [27:0] are accessible on Raspberry Pi-3 40-pin header.

=item B<-1, --w1>           - Register set word 1.

 PinLevel_w1            (virtual read-write)
 EventStatus_w1         (read-clear)
 DetectRise_w1
 DetectFall_w1
 DetectHigh_w1
 DetectLow_w1
 DetectAsyncRise_w1
 DetectAsyncFall_w1

Bits [21:0] represent IO lines [53:32].
Bits [31:22] are reserved.
These lines are accessible on the Raspberry Pi compute module.

=item B<--fsel>             - Fsel function select registers.

 Fsel0
 Fsel1
 Fsel2
 Fsel3
 Fsel4
 Fsel5

These are the raw function select registers, which are not very convenient
to use.  Use rgpio-fsel(1) as a better interface to these registers.

=item B<--pud>              - Pin Pull-Up/Down program registers.

 PudProgMode
 PudProgClk_w0
 PudProgClk_w1

These control programming of the weak hardware pull-up/down on each IO pin
through a special sequence (see rgPudPin(7)).
The programmed pull-up/down is NOT remembered thru power-down (is volatile)
and cannot be read back.
Use rgpio-pud(1) as a better interface to these registers.

=item B<--all>              - All registers above.

Is a shorthand for --w0 --w1 --fsel --pud.

=back

=head2			Register group modifiers on --w0 --w1

=over

=item B<--raw>              - show real instead of virtual PinLevel*

This option displays the three Pin*_w0 registers instead of the virtual
PinLevel_w0 register shown by default.  (same for _w1)

 PinLevel_w0        virtual read-write:
     PinSet_w0          Set-only,   no read.
     PinClr_w0          Clear-only, no read.
     PinRead_w0         Read-only,  no write.

 PinLevel_w1        virtual read-write:
     PinSet_w1          Set-only,   no read.
     PinClr_w1          Clear-only, no read.
     PinRead_w1         Read-only,  no write.

=back

=head2			Modify Register Value

Registers to be modified must be specified in the argument list.
Register groups are disallowed to avoid accidents (e.g. the same bit in
_w0 and _w1 is two different IO lines).

These options modify bits in registers of the argument list.
Normal read/write registers are updated by a read/modify/write process.
The special access registers are updated by writing the value to the
register address and the hardware performs the set or clear operation.

=over

=item B<--set=0xffffffff>   - Set mask bits.

=item B<--clr=0xffffffff>   - Clear mask bits.

These two options work independently to set or clear register bits for which
the given mask bit is a 1.  Other bits (with mask bit 0) are unchanged.

=item B<--mask=0xffffffff>  - mask to select bits of --value

=item B<--value=0x00000000> - bit values selected by --mask

These two options work together.
Register bits for which the given mask bit is a 1 are set to the corresponding
value bit.  Other bits (with mask bit 0) are unchanged.
Register x is updated by:

    x = (x & (~ mask) ) | (value & mask);

=back

The virtual register PinLevel_w0 is modified by writing the underlying
PinSet_w0, PinClr_w0 registers.

=head2			Options

=over

=item B<-v, --verbose>      - Verbose output, show registers in binary.

Normally register values are shown in hexadecimal.  With --verbose an
additional column showing the same value in binary is added.

=back

=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES

 Show all registers.
 % rgpio io --all

 Show registers in binary with --verbose.
 % rgpio io -v

 Show real registers instead of virtual PinLevl_w0.
 % rgpio io --raw

 Set mask bits to 1.
 % rgpio io --set=0x00000123  DetectLow_w0

 Clear mask bits to 0.
 % rgpio io --clr=0x00000123  DetectLow_w0

 Modify a single register to set bits [7:4] to 0x5 (binary 0101).
 % rgpio io -v --mask=0x000000f0 --value=0x00000050  DetectHigh_w0
 IO Pin Registers:             28   24   20   16   12    8    4    0
 0x00000050  DetectHigh_w0   0000 0000 0000 0000 0000 0000 0101 0000


=head1		ENVIRONMENT

none


=head1		FILES

In the source directory tree:

 librgpio/src/rgIoPins.h


=head1		SEE ALSO

B<rgpio>(1)
B<rgpio-fsel>(1)
B<rgpio-pud>(1)
B<rgIoPins>(3)
B<rgIoPins>(7)
B<rgPudPin>(7)
B<librgpio>(3)

 BCM doc:  BCM2835 ARM Peripherals (06 February 2012)
    p.89-101  ch 6.  General Purpose I/O (GPIO)
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

=cut

