# 2018-05-21  William A. Hudson

# rgpio-io -- Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgpio-io -- IO Pin register access

=head1		SYNOPSIS

 rgpio io [options..]  [reg..]
    reg                 register enum name
  register groups:  (accumulate)
    --w0                word 0 registers (default)
    --w1                word 1 registers
    --fsel              Fsel function select registers
    --pud               pin PullUpDown registers
    --all               all registers plus PinSet, PinClr
  modify:  (32-bit values)
    --set=0xff..        set mask bits
    --clr=0xff..        clear mask bits
    --mask=0xff..       mask to select bits of --value
    --value=0x00..      bit values selected by --mask
  options:
    --help              show this usage
    -v, --verbose       verbose output, show registers in binary
    --debug             debug output
  (options with GNU= only)


=head1		DESCRIPTION

This command provides access to the set of pin GPIO registers.  All registers
are 32-bits wide, and may contain reserved fields.

Register names are the same as the enumerated type rgIoPin::rgIoReg_enum
(see file rgIoPin.h) and are listed in the register group options below.
The names are a little long, but aid in the use of the librgpio library.

The default operation is to directly read and display the specified registers.
Reading these IO registers has no side effects, and so is generally safe.

If modification is requested, the process for read/write registers is:

    1) Read current hardware register value.
    2) Modify bits according to mask.
    3) Write modified value back to hardware register.
    4) Read hardware register and display resulting value.

For registers that set/clear bits on write, the process is:
    1) Write bits according to --set or --clr mask.
    2) Read hardware register and display resulting value.

This command is intended to provide raw register access, and does not
provide higher level compound operations.

Note:  The IO lines (and these registers) are typically a shared resource
among multiple asynchronous processes, where each process may use only a few
lines (bits).
The read-modify-write process of updating registers is not atomic.
Therefor a synchronization problem exists, and is typically solved by
externally synchronizing the processes.


=head1		OPTIONS

=head2			Register Groups

These options are an alias for a list of registers.
Multiple register groups can be specified or combined with individual registers.
There is no check for duplicate registers, which will then be repeated.

=over

=item B<--w0>               - Register set word 0.  (default)

 rgPinRead_w0
 rgEventStatus_w0
 rgDetectRising_w0
 rgDetectFalling_w0
 rgDetectHigh_w0
 rgDetectLow_w0
 rgDetectAsyncRising_w0
 rgDetectAsyncFalling_w0

Bits [31:0] correspond to IO lines [31:0].
Note that only bits [27:0] are accessable on Raspberry Pi-3 40-pin header.

=item B<--w1>               - Register set word 1.

 rgPinRead_w1
 rgEventStatus_w1
 rgDetectRising_w1
 rgDetectFalling_w1
 rgDetectHigh_w1
 rgDetectLow_w1
 rgDetectAsyncRising_w1
 rgDetectAsyncFalling_w1

Bits [21:0] represent IO lines [53:32].
Bits [31:22] are reserved.
These lines are accessable on the Raspberry Pi compute module.

=item B<--fsel>             - Fsel function select registers.

 rgFsel0
 rgFsel1
 rgFsel2
 rgFsel3
 rgFsel4
 rgFsel5

These are the raw function select registers, which are not very convenient
to use.  Use rgpio-fsel(1) as a better interface to these registers.

=item B<--pud>              - Pin PullUpDown registers.

 rgPullUpDown
 rgPullUpDownClk_w0
 rgPullUpDownClk_w1

These control programming of the weak hardware pull-up/down on each IO pin
through a special sequence (see "BCM2835 ARM Peripherals").
The programmed pull-up/down is rememberd thru power-down (is non-volatile)
and cannot be read back.

=item B<--all>              - All registers plus PinSet, PinClr

 rgPinSet_w0
 rgPinSet_w1
 rgPinClr_w0
 rgPinClr_w1

Show all 29 registers, that is, all register groups above plus these 4
write-only registers.
Writing these 4 registers will set/clear bits in the pin output register, and
cannot be read back.  Reading them returns an undefined value.

=back

=head2			Modify Register Value

These options modify bits in registers of the argument list.
Normal R/W registers are updated by a read/modify/write process.
The special access registers are updated by writing the value to the
register address and the hardware performs the set or clear operation.

=over

=item B<--set=0xffffffff>   - Set mask bits.

=item B<--clr=0xffffffff>   - Clear mask bits.

These two options work independently to set or clear register bits for which
the given mask bit is a 1.  Other bits (with mask bit 0) are unchanged.
Applies only to normal R/W registers or special access registers that
perform the hardware set or clear operation.

=item B<--mask=0xffffffff>  - mask to select bits of --value

=item B<--value=0x00000000> - bit values selected by --mask

These two options work together.
Register bits for which the given mask bit is a 1 are set to the corresponding
value bit.  Other bits (with mask bit 0) are unchanged.
Register x is updated by:

    x = (x & (~ mask) ) | (value & mask);

Applies only to the normal R/W registers.

=back

=head2			Options

=over

=item B<-v, --verbose>      - Verbose output, show registers in binary.

Normally register values are shown in hexadecimal.  With --verbose an
additional column showing the same value in binary is added.

=back

=head1		RETURN VALUE

0= success, otherwise errors


=head1		EXAMPLES

 Show all registers.
 % rgpio io --fsel --w0 --w1

 Show registers in binary with --verbose.
 % rgpio io -v

 Set select bits to 1.
 % rgpio io --set=0x00000123  rgDetectLow_w0

 Clear select bits to 0.
 % rgpio io --set=0x00000123  rgDetectLow_w0

 Modify a single register to set bits [7:4] to 0x5 (binary 0101).
 % rgpio io --mask=0x000000f0 --value=0x00000050  rgDetectHigh_w0
 0x00000050  rgDetectHigh_w0   0000 0000 0000 0000 0000 0000 0101 0000


=head1		ENVIRONMENT

none


=head1		FILES

In the source directory tree:

 librgpio/src/rgIoPin.h


=head1		SEE ALSO

B<rgpio>(1)
B<rgpio-fsel>(1)
B<librgpio>(3)

 BCM2835 ARM Peripherals (2012)
    p.89-101  6.  General Purpose I/O (GPIO)
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

=cut

