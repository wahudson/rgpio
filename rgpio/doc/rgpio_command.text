2024-04-03  William A. Hudson

		rgpio Command Design
		--------------------

See also:  architecture.text

----------------------------------------------------------------------------
## Command
----------------------------------------------------------------------------
Proposed usage:

% rgpio --help
    Raspberry Pi GPIO utility
usage:  rgpio [main_options..]  feature  [options..]
  common:
    info         RPi Revision Information
    man          reference manuals
    header       Pin Function, by pin number on 40-pin header
  RPi4 and earlier:
    fsel         IO Function Select
    io           General Purpose IO pins
    clk          Clock generator
    iic          I2C Master
    pwm          PWM Pulse Width Modulator
    spi0         SPI0 Master
    timer        System Timer
    uspi         Universal SPI Master, Spi1, Spi2
    pads         Pads Control
    pud          Pin Pull-Up/Down - RPi3 and earlier
    pull         Pin Pull-Up/Down - RPi4 only
  RPi5 only:
    fsel5        IO Function Select - RPi5
    rio          Register IO
.   rcon         IO control, function select    [IoStat() also?]
    rpad         IO pad control
.   rstat        IO event/edge detect
.   rintr        IO interrupt control
  main options:
    --dev=m|g|f         device file type, m= /dev/mem (default),
                                          g= /dev/gpiomem, f= fake
    --rpi3              simulate RPi3 or earlier
    --rpi4              simulate RPi4
    --rpi5              simulate RPi5
    -n, --sim		simulate appropriate platform (dry run)
    --help              show this usage
    -v, --verbose       verbose output, show if fake memory
    --debug             debug output
    --version           show version info
  (options with GNU= only)

Command Names:

    RPi5-only commands are grouped separately.
    The RPi5 IO command names begin with 'r' as a grouping mechanism,
    keying off of the 'rio' Register IO command name.

    fsel, fsel5:
    Decided to keep fsel5 as a separate command for RPi5 (2024-09-24).
    They have similar purpose, hence similar names.
    Try the suffix '5' and see how it goes.

----------------------------------------------------------------------------
## Simulate RPi Options
----------------------------------------------------------------------------

    The --rpi3 etc. options force simulation of the corresponding platform.
    Useful for exploring commands for other platforms.

    Initial idea is for --sim to simulate the current platform, essentially
    making like a dry run.
    On a non-RPi, --sim would essentially do nothing (almost).

real-RPi Platform:

    Assume SocEnum is set to the real-RPi platform.
    On a Real RPi, what aspects should be simulated?
    What commands should be valid?

    A) Literal simulation of the real-RPi platform - Get exception on
	    inappropriate commands.
	+ Is what a dry-run (no-execute) should do.
	- Awkward to explore commands of other RPi platforms.
	- Not like fake memory on non_RPi.

 >  B) Simulate as if on a non-RPi.  Simulate all commands.
	+ Convenient to explore all commands.
	+ Essentially force non-RPi.
	- No exceptions on wrong platform commands.
	+ Still get dry-run behavior on commands appropriate for the platform.

	This seems more useful.  The documentation seems fairly clear as to
	what commands can actually run.  If the user tries a command that
	simulated another platform, the real run (non simulation) will draw
	an exception.

non-RPi Platform, no --sim:

    Current Library behavior is:  (2024-10-07)
    Constructor defaults to zero for RevCode, SocEnum, and BaseAddr.
    After find(), all 3 values are zero, Final and Unknown.  If the
    predecessor is Unknown, the value is left unchanged and marked Unknown.
    Note BaseAddr=0x00000000 looks inconsistent with SocEnum=0 (soc_BCM2835),
    the real BaseAddr would be 0x20000000.

    This seems reasonable, with BaseAddr=0 suggesting it is unknown.
    BaseAddr=0 provides another check that platform is non-RPi.
    Want to keep this behavior.

non-RPi Platform, with --sim:  (BaseAddr)

    Allow platform appropriate for the command (as above).
    What BaseAddr should be used?

 >  A) Let --sim force SocEnum to be Final and Known, derive BaseAddr.
	+ BaseAddr is consistent with SocEnum.
	- BaseAddr changes from zero without --sim.

    B) Force BaseAddr=0.
	+ Consistent with no --sim.
	- BaseAddr is not simulated, not very useful.

    It is much more useful to see correct BaseAddr in simulation.

All Platforms:  (RevCode)

    We want SocEnum to be simulated (with derived BaseAddr) as above.
    How should RevCode be simulated?  Mostly affects rgpio-info.

    A) Use real RevCode on real-RPi, and RevCode=0 on non-RPi.
	+ Is more "real".  Seems natural.
	- Different on real-RPi and non-RPi.  Seems confusing.
	- The --rpi3 options do not provide a non-zero RevCode.

 >  B) Let simulated RevCode=0 on all platforms.
	+ Consistent on real-RPi and non-RPi.
	+ Serves as a hint that result is simulated.
	+ Avoids making a fake RevCode for --rpi3 options.

    Seems like (B) RevCode=0 is best.

    Simulation mode is a bit quirky between real-RPi and non-RPi.  Seems best
    to make it more consistent (but not perfect) by modeling the non-RPi
    behavior on all platforms.

----------------------------------------------------------------------------
## RPi5 vs RPi4 IO Configuration
----------------------------------------------------------------------------

    See also:  librgpio/doc/extend_rpi5.text

    The RPi5 Features are sufficiently different that it can be complex
    and confusing to provide both in the same sub-command.  Separate commands
    make a clean distinction.

    Thinking only about IO configuration, and not the device units like
    iic, spi, clk, pwm, etc.

Header and Fsel:

    The rgpio-header command focuses on the RPi header pins.
    The rgpio-fsel   command focuses on the Gpio alternate functions.
    These have much in common between RPi5 and RPi4 (and earlier), so it
    would be good to have just these two focused commands and not make
    additional commands for RPi5.

    The rgpio-header command has only one option for modifying the function
    select (--mode=In).  We could cleanly add a new option for RPi5, and
    perhaps do the same for rgpio-fsel.

 >  (2024-09-22)  rgpio-header  Added --func=N for RPi5.
    This resulted in switching on platform in 7 places (option, constructor,
    --show heading, --show body, --debug, modify, and output).  Quite a lot
    of switching for minimal feature addition, but it does re-use quite a bit
    of code.
    It seems worth while, since the header pins are a common interface on
    all RPi.

 >  It seems too messy to replicate for rgpio-fsel, since it has around
    5 options that are RPi4 specific.  Better to let it be just RPi4 and
    earlier.  [It does have --show for RPi5, which is fairly clean.]
    The Gpio numbering and word groupings do not match at all with RPi5.

Function Select option names:  (e.g. rgpio-header)

    modify:  (RPi4 and earlier)
	--mode=In       set function mode {In, Out, Alt0, .. Alt5}
    modify:  (RPi5)
	--func=N        {0..31} FuncSel_5 field value

    Possible alternative option names:
    A) --mode=N
	Too confusing to switch the meaning.  Especially between enum and int.

    B) --fsel=N
	The word 'fsel' is already strongly associated with the RPi4
	alternate function enums.

 >  C) --func=N
	This seems pretty good.
	It is a word fragment, but could always be qualified with '--'.

    D) Other names
	--function=N
	--funcsel=N	seems a bit long
	--funcn=N
	--fun=N

    The idea is to use the same option --func=N in sub-commands that set the
    RPi5 FuncSel_5 field.  e.g. rgpio-header, fsel, rcon

RPi4 Commands:  fsel, io, pud, pull, pads

    These command names made sense in the original RPi3 context.

RPi5 Commands:  fsel5, rio, rcon, rpad, rstat

    There is a lot more IO control functionality and complexity in RPi5.

rgpio-func:  (proposed command)

    Logical connectivity of Features to Gpio pins.

    A new command to focus on the alternate functions and logical connectivity
    of Gpio0..Gpio27 for both RPi5 and RPi4.
    Focus is on this commonly needed functionality.
    NOT all Gpios.
    NOT Atomic register addresses of RPi5.
    NOT pad pull up/down, drive strength, hysteresis, etc.
    IS function select of RPi4 and RPi5 like rgpio-header.
    IS one place to see the logical connectivity of RPi5.
    IS a compliment to rgpio-header, which focuses on the Header pins.
    Duplicates select functionality of other commands.

    RPi5 has about 6 fields in rgsIoCon and rgsIoPads that affect the logical
    connectivity of Features:  input enable, output disable, input override,
    output override, output enable override, and function select.
    It would be nice to group just these together in a common command.
    Utilize only Bank0.

    RPi4 has only the Fsel registers of rgFselPin.
    Utilize only Gpio0..27.

    Leave rgpio-fsel as-is for the full range of Gpio0..Gpio53 on RPi4.
    Let rgpio-rcon and rgpio-rpad handle the full capability of RPi5.

    An idea for now, we shall see.  (2024-09-22)

----------------------------------------------------------------------------
## Common Feature Behavior
----------------------------------------------------------------------------

RPi Platform:

    Command validity on the platform is checked by the Feature constructor,
    i.e. throw std:domain_error, not by the rgpio top-level program.  The
    resulting error message makes it clear it is a platform error.
    This helps demonstrate library behavior.

----------------------------------------------------------------------------
## Anti-Bugging
----------------------------------------------------------------------------

cout Manipulators:

    Using <<left with <<setw(8) will left-justify the value and fill on the
    right with the fill character.  If cout.fill('0') it will fill with
    zero, changing the apparent value.
    e.g.
	cout.fill('0');
	cout << "0x" <<hex <<left <<setw(8) << 0x33
    would produce  0x33000000

    Stream cout is global and cout.fill('0') is sticky.
    Manipulator <<setw() is not sticky.

    Manipulators <<left, <<right, <<hex, <<dec are sticky and easy to get
    an unexpected setting.  Especially when embedded in a subroutine.
    Anti-bugging could include:

    A) Always specify sticky manipulators in a new block.
	Especially if <<setw() is used.

    B) Restore default sticky manipulators when exiting a block.
	cout.fill(' ');
	cout <<dec <<right

using namespace std:

    Beware namespace clash with 'cout <<hex' io manipulator.
    A local variable declared 'int hex;' will be output instead.
    No compiler warning.  Same for other manipulators.
    Use 'cout <<std::hex' to be explicit when needed.

----------------------------------------------------------------------------
## Essential Process
----------------------------------------------------------------------------

    Rgpio is a cockpit command, essentially a big switch to configure and
    call the appropriate sub-command.

Essential process:
    + Configure rgRpiRev default SocEnum for simulation on non-RPi.
    + Construct rgAddrMap object.
    + Open device file.
    + Construct and Call the sub-command.

    For RPi4 and earlier (v0.22.0 2024_03_12), all commands had essentially
    the same default configuration for simulation when on non-RPi platform.

    With RPi5, the new commands are incompatible and require a different
    default configuration.

    When not on an RPi, we want all commands to run in the appropriate
    simulation mode for convenience.  Early experiments showed it was quite
    annoying to have to apply the correct --rpi5 simulation option.

Table lookup method:

    Now we need to lookup the command, and configure the appropriate default
    SocEnum before constructing rgAddrMap.

    The following code snippets illustrate the essential operations.  See
    rgpio.cpp for the actual code.

    // Define functions for calling each sub-command

	int	rf_io(   yOptLong *optx, rgAddrMap *amap ) {
	    y_io	rrx  ( optx, amap );
	    return  rrx.doit();
	};

	int	rf_rpad( yOptLong *optx, rgAddrMap *amap ) {
	    y_rpad	rrx  ( optx, amap );
	    return  rrx.doit();
	};

	...

    // Data needed for each sub-command
	class	entry_t {
	  public:
	    int		RpiNum;
	    string	CmdName;
	    int		(*Pfunc) ( yOptLong *optx, rgAddrMap *amap );
			    // pointer to function
	};
	    We need the RpiNum to configure rgRpiRev::Global.

    // Table entry for each sub-command
	entry_t		functab[] = {
	    { 0, "io",       &rf_io         },
	    { 5, "rpad",     &rf_rpad       },
	    ...
	    { -1, NULL,      NULL           }	// mark end of table
	};

    // Search table for sub-command
	entry_t		*entry = functab;	// first table entry
	for ( ;  entry->CmdName != NULL;  entry++ )
	{
	    if ( Opx.feature == entry->CmdName ) { break; }
	}
	...

    // Configure rgRpiRev default for RPi version
	if ( entry.RpiNum == 5 ) {
	    rgRpiRev::Global.SocEnum.defaultv( rgRpiRev::soc_BCM2712 );
	}
	else { leave default for RPi3 }

    // Construct address map
	rgAddrMap		Amx;
	Amx.config_FakeNoPi( 1 );		// when not on RPi
	Amx.config_Debug( Opx.debug );

    // Open dev file
	...
	Amx.open_dev_mem();

    // Call sub-command function
	retv = (entry->Pfunc) ( &Opx, &Amx );

    ...

Original method:  (rgpio v0.22.0 2024_03_12)

    The simple original method was a big "else if" chain for each command, e.g.
	...
	else if ( Opx.feature == "fsel"    ) {
	    y_fsel              fx  ( &Opx, &Amx );     // constructor
	    retv = fx.doit();
	}
	...

    This worked fine for RPi4 and earlier where all commands had the same
    default configuration.

