# 2020-06-18  William A. Hudson

# rgIic  Hardware Register Description.
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgIic  Hardware Description -- I2C Master

=head1		SYNOPSIS

Hardware registers of each I2C Master:  (iic0, .. iic7)

    rgIic
    Register	BCM Name	Description
    --------	--------        ------------------
    Cntl	C		Control
    Stat	S		Status
    DatLen	DLEN		Data Length
    Addr	A		Slave Address
    Fifo	FIFO		Data FIFO
    ClkDiv	DIV		Clock Divider
    Delay	DEL		Data Delay
    ClkStr	CLKT		Clock Stretch Timeout

     Reg.Field			Bits    BCM
    ----.---------------	------  -----
    Cntl.IicEnable_1		[15]    I2CEN
    Cntl.IrqRxHalf_1		[10]    INTR
    Cntl.IrqTxHalf_1		[9]     INTT
    Cntl.IrqDone_1		[8]     INTD
    Cntl.StartTrans_1		[7]     ST    (WO)
    Cntl.ClearFifo_2		[5:4]   CLEAR (WO)
    Cntl.ReadPacket_1		[0]     READ

    Stat.ClkTimeout_1		[9]     CLKT (R/C)
    Stat.AckErr_1		[8]     ERR  (R/C)
    Stat.RxFull_1		[7]     RXF  (RO)
    Stat.TxEmpty_1		[6]     TXE  (RO)
    Stat.RxHasData_1		[5]     RXD  (RO)
    Stat.TxHasSpace_1		[4]     TXD  (RO)
    Stat.RxHalf_1		[3]     RXR  (RO)
    Stat.TxHalf_1		[2]     TXW  (RO)
    Stat.TransDone_1		[1]     DONE (R/C)
    Stat.TransActive_1		[0]     TA   (RO)

    DatLen.DataLen_16		[15:0]  DLEN

    Addr.SlaveAddr_7		[6:0]   ADDR

    Fifo.Data_8			[7:0]   DATA

    ClkDiv.ClkDiv_16		[15:0]  CDIV

    Delay.Fall2Out_16		[31:16] FEDL
    Delay.Rise2In_16		[15:0]  REDL

    ClkStr.TimeOut_16		[15:0]  TOUT

    (WO) = Write-only, (RO) = Read-only, (R/C) = Read/Clear,
    otherwise all are read-write.

Field names incorporate the number of bits in the field, making the field
size self documenting.

All registers are 32-bits.
Unspecified bit fields in each register are typically reserved, and should
be write as 0, and read as don't care.

=head2			Abbreviations in Register/Field names

 Clk     Clock
 Trans   Transfer
 Fifo    First In First Out (FIFO) memory
 Rx      Receive FIFO
 Tx      Transmit FIFO
 Irq     Interrupt Request (IRQ)


=head1		DESCRIPTION

I2C (or IIC) stands for "Inter-Integrated Circuit" serial communication.
The Raspberry Pi (RPi) has 8 I2C Master controllers named as:

 iic0, iic1, iic2               in RPi3 (BCM2837) and earlier
 iic3, iic4, iic5, iic6, iic7   added in RPi4 (BCM2711)

Note that iic2 and iic7 are dedicated for use by the HDMI interfaces and
should not be accessed by user programs.

The BCM doc describes it as the Broadcom Serial Controller (BSC), and the bus
as a proprietary bus compliant with I2C.
Each controller has the same interface structure described here.
See the BCM doc for a description of 10-Bit Addressing.

=head2			Features

 - I2C single Master only operation.
 - Fast mode, 400 K bits/s
 - Clock stretching wait states are supported.
 - Both 7-bit and 10-bit addressing is supported.
 - Timing completely software controllable via registers.
 - Compliant with the Philips I2C bus/interface version 2.1 January 2000.

Note:  The BSC controller in the BCM2711 (RPi4) fixes the clock-stretching
bug that was present in BCM283x (RPi3 and earlier) devices.

=head2			Hardware Signals

GPIO Alternate Function names (hardware signals) are:

    iic0_SCL	Serial Clock, driven by master
    iic0_SDA	Serial Data
    ...
    Similarly for  iic1_*, iic3_*, iic4_*, iic5_*, iic6_*.

    No alternate function pins are identified for  iic2_* and iic7_*.

=head2			Signal Electrical Characteristics

Both SCL and SDA are bidirectional signals having open-drain (open-collector)
drivers.  They each require a pull-up resistor to the 3.3 V power supply,
which may be provided internally, or externally.

Normal GPIO pin outputs have push-pull drivers.  When the GPIO pins are
configured for SCL and SDA, the driver is operated in an open-drain mode,
essentially by disabling the active pull-up FET (Field Effect Transistor).

Be aware the internal GPIO pin pull up/down resistors can be configured to
pull up, pull down, or be turned off.

Note that RPi4 and earlier boards have 1.8 kohm pullup resistors on the
iic1 pins Gpio[2] and Gpio[3].  See RPi schematics.

=head2			Signal Timing

Start and Stop conditions are indicated by an SDA edge when SCL is high.
Normal data changes are allowed only when SCL is low.

          _______     ___     _     _     ___     _________
    SCL          |___|   |___|  ...  |___|   |___|
          _____     _______ ___     ___ _______     _______
    SDA        |___X_______X___ ... ___X_______|___|
               ^                                   ^
          | Start|         Data Transfer         |Stop | Idle

Typically SDA is sampled on the rising edge of SCL, and changed on the
falling edge of SCL.  The B<Delay> register can be used to adjust timing of
the RPi master.

=head2			I2C Operation

A transaction consists of Start condition followed by an address packet,
zero or more data packets, and a Stop condition.

A packet consists of 8 data bits signaled by the sender, MSB first, followed
by an acknowledge (ACK) bit signaled by the receiver.

An address packet has data that consists of the 7-bit device address, MSB
first, followed by the B<ReadPacket_1> read/write bit.

 Address transaction, no data.
   S | A6 A5 A4 A3 A2 A1 A0 Rw Ks | P

 Write transaction.
   S | A6 A5 A4 A3 A2 A1 A0 0  Ks | D7 D6 D5 D4 D3 D2 D1 D0 Ks |... P

 Read transaction.
   S | A6 A5 A4 A3 A2 A1 A0 1  Ks | d7 d6 d5 d4 d3 d2 d1 d0 Km |... P

 Start|    address packet         |        data packet        |... Stop

    S      = Start condition, by master
    P      = Stop  condition, by master
    A6..A0 = device address, always sent by master
    Rw     = Read/write bit, by master
    Ks     = Acknowledge, by slave
    Km     = Acknowledge, by master
    D7..D0 = data byte, by master
    d7..d0 = data byte, by slave

Acknowledge bit:  0= ACK acknowledge (actively driven low), 1= NACK
not acknowledge (passively pulled high).
ACK is driven by the receiver of the packet to indicate OK to continue.

See I2C documentation below for diagrams and more details.

=head2			RPi Master Operation

This short summary of highlights for the RPi I2C Master is derived from
documentation and experiment.

The RPi master is intended to control a single transaction in one direction
at a time.  It has no controls to create a repeated start.
It has no mechanism to queue up multiple transactions, although data for
successive transactions can be placed in the FIFO.

A transaction is started by setting B<StartTrans_1>=1.  Note that status
B<TransActive_1> is not immediately set, and becomes 1 some time later.
The address packet is sent immediately, even if there is no data in the FIFO.

A write transaction with no data, i.e. B<DataLen_16>=0, will send just the
address.  This can be used to probe for devices on the bus, looking for
addresses that do not result in an acknowledge error B<AckErr_1>=1.

If a write transaction runs out of data in the FIFO, the master will wait
indefinitely, holding SCL high.  [Is there a timeout?]
The receiving slave will have acknowledged the previous packet, and is forced
to continue holding SDA low, since SDA changes are not allowed when SCL is
high.
Note some slaves may have a timeout to avoid locking up the bus, and will
raise SDA anyway (signaling Stop).  The RPi master sees this, and responds
by sending Stop.

If the FIFO becomes full on a read transaction, the master will wait
indefinitely, holding SCL high.  When the processor removes an entry, the
master will receive another packet.

It is not necessary to clear B<TransDone_1> to start another transaction,
but it is necessary in order to change B<DataLen_16>.

The B<IicEnable_1> control can be used to suspend an active transaction, and
later resume it.

The B<ClearFifo_2> control can be used to abort an active transaction.

A read transaction with no data, B<DataLen_16>=0, can hang the bus if the
slave was expecting to send more data and the first read data bit is 0.
What happens:  The master issues one more SCL cycle, low then high, in order
to send a Stop condition.  However the slave is holding SDA low for the
first read data bit, preventing the master from signaling Stop by raising SDA.
Now SCL is left high by the master, and the slave is stuck holding SDA low
since changes are not allowed while SCL is high.

=head2			Hardware FIFO

There is only one data FIFO, which has 16 entries of 8 bits.

The FIFO has 4 data ports:  Processor Writes to the B<Fifo> register inserts
entries, and Reads remove entries.  The I2C receiver (Rx) inserts entries,
and the transmitter (Tx) removes entries.
The Processor can read or write while the I2C master is active.
The various FIFO status fields are updated as entries are inserted or removed.

The I2C bus only sends N data bytes in one direction for each Start address
byte.  Thus it can use the same data FIFO for both Receive (Rx) and
Transmit (Tx).  This differs from SPI, which has two FIFOs that operate
simultaneously.

It seems likely a previous chip version had two FIFOs.
Control and Status Register operation would remain the same, but two FIFOs
would have the ability to queue up Tx data while a Rx transfer is in progress.
Instead with a single FIFO, we see processor reads can return FIFO data from
previous processor writes.

The documentation refers to Rx and Tx FIFOs as if they are separate, but
keep in mind they are one and the same.

Some FIFO flags for Rx and Tx are redundant with a single FIFO.  It may be
best to use the flags as if they were separate FIFOs, i.e. use Tx flags
when sending, and Rx flags when receiving.


=head1		REGISTER BIT FIELDS

The numeric suffix on the field name indicates the number of bits in the field.

=head2			Cntl Register

Control register.

=over

=item B<IicEnable_1>        - Enable the I2C interface.

 1= Enabled
 0= Disabled

Enables interface activity.  When disabled, hardware transfers are not
performed, but software register access is allowed.

[Can operation be suspended in the middle of a transfer?
Intended only as a way to disable all interrupt sources?
]

=item B<IrqRxHalf_1>        - Interrupt on Rx FIFO over "half" full.

 1= Generate interrupt while Stat.RxHalf_1=1
 0= Not

The interrupt remains active until the condition is cleared by reading
sufficient data from the Rx FIFO.

=item B<IrqTxHalf_1>        - Interrupt on Tx FIFO under "half" full.

 1= Generate interrupt while Stat.TxHalf_1=1
 0= Not

The interrupt remains active until the condition is cleared by writing
sufficient data to the Tx FIFO.

=item B<IrqDone_1>          - Interrupt on Transfer Done.

 1= Generate interrupt while Stat.TransDone_1=1
 0= Not

The interrupt remains active until the condition is cleared by writing
a 1 to the B<Stat.TransDone_1> field.

=item B<StartTrans_1>       - Start Transfer.  (WO)

 1= Start a new transfer
 0= No action

Writing 1 is a one-shot operation, and always reads back as 0.

=item B<ClearFifo_2>        - Clear FIFO.  (WO)

 0= No action
 1= Clear
 2= Clear
 3= Clear

Clear the FIFO in a one-shot operation, always reads back as 0.
If both B<StartTrans_1> and B<ClearFifo_2> are set in the same write register
operation, the FIFO is cleared before the new transfer is started.
Clearing the FIFO during a transfer will result in the transfer being aborted.

Note:  The 2 bits are redundant to maintain compatibility with a previous
chip version [perhaps when there were separate Rx and Tx FIFOs].

=item B<ReadPacket_1>       - I2C transfer Read/Write type.

 1= Read
 0= Write

This is the Read/Write bit value in the Start byte of the transfer,
sent along with the slave address.

=back

=head2			Stat Register

Status register.
(RO) = Read-only.  (R/C) = Read/Clear, cleared by writing 1.

=over

=item B<ClkTimeout_1>       - Slave clock stretch timeout.  (R/C)

 1= Timeout
 0= Not

Slave has held the SCL signal low (clock stretching) for longer
than specified by B<ClkStr.TimeOut_16>.
Cleared by writing 1.  Writing 0 has no effect.

=item B<AckErr_1>           - Slave acknowledge error.  (R/C)

 1= Slave acknowledge error
 0= Not

Slave has not acknowledged its address or a data byte written to it.
Cleared by writing 1.  Writing 0 has no effect.

=item B<RxFull_1>           - Rx FIFO is Full.  (RO)

 1= Rx FIFO is full
 0= Not

When full, no more SCL clocks will be generated and no further serial data
will be received.  (Assuming Read transfers.)

=item B<TxEmpty_1>          - Tx FIFO is Empty.  (RO)

 1= Tx FIFO is empty
 0= Not

When empty, no more SCL clocks will be generated and no further serial data
bytes will be sent.  (Assuming Write transfers.)

=item B<RxHasData_1>        - Rx FIFO has data.  (RO)

 1= Rx FIFO contains at least 1 byte.
 0= Is empty.

Software reads from an empty FIFO will return invalid data.

=item B<TxHasSpace_1>       - Tx FIFO has space.  (RO)

 1= Tx FIFO has space for at least 1 byte.
 0= Is full.

Software writes to a full Tx FIFO are ignored.

=item B<RxHalf_1>           - Rx FIFO is over "half" full.  (RO)

 1= Rx FIFO is over "half" full and a Read transfer is underway.
 0= Not

Here "half" is fuzzy, but the idea is to signal that more data should be
read from the FIFO before it overflows.

Observation indicates that (B<RxHalf_1> = 1) when the FIFO has >= 12 entries
and (B<ReadPacket_1> = 1), and is zero otherwise.  It does not depend on
B<TransDone_1> or B<TransActive_1>.

=item B<TxHalf_1>           - Tx FIFO is under "half" full.  (RO)

 1= Tx FIFO is under "half" full and a Write transfer is underway.
 0= Not

Here "half" is fuzzy, but the idea is to signal that more data should be
written to the FIFO before it goes empty.

Observation suggests this bit is non-functional, and seems to be stuck zero.
#!! Also zero if there is sufficient data to send?

=item B<TransDone_1>        - Transfer Done.  (R/C)

 1= Transfer completed
 0= Not

The specified number of bytes in B<DatLen.DataLen_16> have been transferred.
Cleared by writing 1.  Writing 0 has no effect.

=item B<TransActive_1>      - Transfer Active.  (RO)

 1= Transfer is in progress.
 0= Idle

=back

=head2			DatLen Register

Data length register.

=over

=item B<DataLen_16>        - Data Transfer Length.

Is the number of data bytes remaining to be sent or received.
It behaves as a single register that counts down, and does not remember the
last processor write value.

Processor writes are ignored unless (B<TransDone_1> = 0).

Starting a transfer with (B<DataLen_16> = 0) will send only the address byte,
followed by a STOP condition.

The BCM Doc indicates additional functionality:  Reading when
(B<TransActive_1> = 0) and (B<TransDone_1> = 0) returns the value last written
by the processor.  Essentially it would have a second register holding the
original number of bytes.  That value can be left over multiple packets,
i.e. no need to re-write the same value.
This behavior is not observed (perhaps it was in a previous chip version).

Bummer!  Each transaction must clear TransDone_1 and then re-write DataLen_16.

=back

=head2			Addr Register

Address register.

=over

=item B<SlaveAddr_7>        - Slave Address

Slave address of the I2C device.
The value can be left across multiple transfers.

=back

=head2			Fifo Register

The single data FIFO is 16 entries of 8-bits each, and is used for both
transmit (Tx) and receive (Rx).
There appears to be no mechanism that keeps Rx data separate from Tx data.
Thus a Fifo register read can return data inserted by a Fifo register write,
and it is likely Fifo register writes can mix data with received Rx data.

=over

=item B<Data_8>             - Fifo Data

Write inserts a data byte in the FIFO, intended for transmit (Tx).
Read removes a data byte from the FIFO, expected from receive (Rx).

Data writes to a full FIFO will be ignored and data reads from an empty
FIFO will return invalid data.
The FIFO can be cleared using B<Cntl.ClearFifo_2> field.

Note reads from an empty FIFO may appear to return the last valid value, but
that is just coincidence and often is whatever register was read last.

=back

=head2			ClkDiv Register

Clock divider register.

=over

=item B<ClkDiv_16>          - Clock Divisor value.

The value is always rounded down to an even number.

 SCL clock frequency is:
    Fscl = Fcore / ClkDiv_16
 where
    Fcore = core clock frequency, nominally 150 MHz.

The BCM Doc states:  The reset value of 1500 (0x05dc) should result in a
100 kHz SCL clock frequency.  A value of zero is the maximum value 65536
(0x10000).

Note the actual clock frequency depends on the processor core clock frequency,
which may vary with operating system power-save and thermal management.

Observation on Raspberry Pi 3B indicates:  A value of (ClkDiv_16 = 2500)
gives a 10 us period (100 kHz) when processor is idle,
and a 6.25 us period (160 kHz) when busy.

[The BCM doc is inconsistent between the equation and divisor values.]
What specifies the core clock frequency?
Is there an associated Clock Manager?

=back

=head2			Delay Register

Data delay register.  Provides fine control of the SDA signal sample/change
point.

Caution:  Delay values should be less than (ClkDiv_16 / 2).
Otherwise the delay may be longer than the SCL clock high or low time, causing
the controller to malfunction.

=over

=item B<Fall2Out_16>        - Falling Edge Delay to output.

Number of core clock cycles to wait after the falling edge of SCL before
outputting next data bit.  (Change when SCL is low.)

=item B<Rise2In_16>         - Rising Edge Delay to input.

Number of core clock cycles to wait after the rising edge of SCL before
sampling the next data bit.  (Sample when SCL is high.)

=back

=head2			ClkStr Register

Clock Stretch Timeout register.
Provides a timeout on how long the master waits for a slave stretching the
clock before deciding that the slave has hung.

=over

=item B<TimeOut_16>         - Clock Stretch Timeout value.

Number of SCL clock cycles to wait after the rising edge of SCL before
deciding that the slave is not responding.
A value of 0 disables timeout.

When a timeout occurs, the B<Stat.ClkTimeout_1> status bit is set.

=back


=head1		FILES

In the librgpio/ source tree:

 src/rgIic.h
 src/rgIic.cpp


=head1		SEE ALSO

 rgIic(3)
 rgpio-iic(1)
 librgpio(3)

 BCM doc:  BCM2835 ARM Peripherals (06 February 2012)
    p.28-37  ch 3.  BSC (Broadcom Serial Controller)
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

 BCM doc:  BCM2711 ARM Peripherals (2020-10-16)
    p.24-30  ch 3.  BSC (Broadcom Serial Controller)
    http://datasheets.raspberrypi.org/bcm2711/bcm2711-peripherals.pdf

 https://elinux.org/BCM2835_datasheet_errata

 Understanding the I2C Bus
    https://www.ti.com/lit/pdf/slva704
    Texas Instruments, Application Report SLVA704 - June 2015, 7 pages

 UM10204 I2C-bus specification and user manual
    https://www.nxp.com/docs/en/user-guide/UM10204.pdf
    Version 6, April 2014, 64 pages

=cut

