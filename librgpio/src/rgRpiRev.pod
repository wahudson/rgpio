# 2020-12-20  William A. Hudson

# rgRpiRev  Raspberry Pi Revision class -- Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgRpiRev class -- Raspberry Pi Revision

=head1		SYNOPSIS

 #include "rgRpiRev.h"

=head2			Essential Class members

 class rgRpiRev {
  public:	// word registers for user configure or query
    rgRpiRev_Code	RevCode;	// revision code
    rgRpiRev_Soc	SocEnum;	// chip id
    rgRpiRev_Base	BaseAddr;	// IO base address

    static rgRpiRev	Global;     // global config data is this class

  public:
    enum Soc_enum {	// SOC chip identifiers, order is relied upon
	soc_BCM2835 = 0,	// RPi1, Zero
	soc_BCM2836,		// RPi2
	soc_BCM2837,		// RPi3, and later RPi2
	soc_BCM2711,		// RPi4
	soc_BCM2712 		// RPi5, RP1 io chip
    };

    rgRpiRev();			// constructor

  public:	// class methods on Global data

    static void		simulate_RevCode( uint32_t code );
    static void		simulate_SocEnum( Soc_enum soc );
    static void		simulate();

    static Soc_enum	find_SocEnum() { return Global.SocEnum.find(); }
    static uint32_t	find_BaseAddr(){ return Global.BaseAddr.find();}

    static const char*	cstr_SocEnum() { return Global.SocEnum.cstr(); }

		// enum conversions
    static const char*	soc_enum2cstr( Soc_enum  soc );
    static Soc_enum	int2soc_enum(  int       num );

		// platform IO capability functions
    static void		initialize_ioRPi();
    static bool		ioRPiReal();
    static bool		ioRPi0();
    static bool		ioRPi3();
    static bool		ioRPi4();
    static bool		ioRPi5();
 };

=head2		Common Functions of  RevCode, SocEnum, BaseAddr

    bool		is_final()		{ return  Final; }
    bool		is_unknown()		{ return  Unknown; }

=head2		BaseAddr object Functions

    uint64_t		find();
    void		override( uint64_t v );

=head2		SocEnum object Functions

    Soc_enum		find();
    const char*		cstr()    { return  soc_enum2cstr( find() ); }
    void		override( Soc_enum v );
    void		defaultv( Soc_enum v );

=head2		RevCode object Functions

    uint32_t		find();
    void		override( uint32_t v );
    void		defaultv( uint32_t v );
    void		init_file( const char* v )  { InFile = v; }
    const char*		init_file()		    { return  InFile; }

=head2		RevCode object Field Accessors

    uint32_t		get_OverVoltageDis_1();
    void		put_OverVoltageDis_1( uint32_t v);

    uint32_t		get_OtpWriteDis_1();
    void		put_OtpWriteDis_1( uint32_t v );

    uint32_t		get_OtpReadDis_1();
    void		put_OtpReadDis_1( uint32_t v );

    uint32_t		get_WarrantyVoid_1();
    void		put_WarrantyVoid_1( uint32_t v );

    uint32_t		get_NewStyle_1();
    void		put_NewStyle_1( uint32_t v );

    uint32_t		get_MemSize_3();
    void		put_MemSize_3( uint32_t v );

    uint32_t		get_MfgNumber_4();
    void		put_MfgNumber_4( uint32_t v );

    uint32_t		get_ChipNumber_4();
    void		put_ChipNumber_4( uint32_t v );

    uint32_t		get_BoardType_8();
    void		put_BoardType_8( uint32_t v );

    uint32_t		get_BoardRev_4();
    void		put_BoardRev_4( uint32_t v );


=head1		DESCRIPTION

The purpose of the B<rgRpiRev> class is to provide global identification of
the Raspberry Pi (RPi) model.  The peripheral registers vary with each model
and have corresponding differences in the library.

Two primary attributes needed by the library are B<BaseAddr> for mapping
IO registers, and B<SocEnum> for switching code behavior.
Both can be derived from B<RevCode>.  They are defined as follows:

B<BaseAddr> - Base address of IO peripheral memory in the ARM physical
address space, and corresponding to the "legacy master address" 0x7e00_0000
specified in the BCM Doc [1][2].
Used in B<rgAddrMap> to map /dev/mem for each peripheral feature.
Derived from B<SocEnum> using a hardcoded lookup table.

    BaseAddr      RPi Model
    ----------    ---------
    0x20000000    RPi1, Zero
    0x3f000000    RPi2,3
    0xfe000000    RPi4
    0x1f00000000  RPi5, 64-bit

B<SocEnum> - Processor chip SOC (System On a Chip) identification.
The chip determines what peripheral features and registers exist.
Used by the library and user code to switch behavior as needed.
Derived from the corresponding B<RevCode> field.

    SocEnum         RPi Model
    --------------  ----------
    0: soc_BCM2835  RPi1, Zero
    1: soc_BCM2836  RPi2
    2: soc_BCM2837  RPi3, and later RPi2
    3: soc_BCM2711  RPi4
    4: soc_BCM2712  RPi5, using RP1 io chip

B<RevCode> - Raspberry Pi revision code.
This is a 32-bit word stored in the OTP (One Time Programmable) memory on
the chip, and contains fields for the various hardware attributes of the
system (see below).
It is typically read from the "Revision" line in the /proc/cpuinfo file [4].
It can also be read as register 30 with the command "vcgencmd otp_dump" [5].
Not directly used by the library, but available for user code.

Here these attributes are referred to as "registers", to parallel the
hardware registers of other peripheral Features.

=head2			Derivation

These three attributes are derived as follows:  (arrow to source)

    BaseAddr -> SocEnum -> RevCode -> /proc/cpuinfo

The derivation of values is automatic as needed by the find() functions.
Caching prevents re-derivation, since they are not expected to change over
the life of the program process.

Exceptions are thrown only if there is an error in derivation,
e.g. if /proc/cpuinfo cannot be opened, or has a "Revision" line of bad
format.  No "Revision" line implies not an RPi.

=head2			Configuration/Override

Simulation:  When on a non-RPi platform, the library (i.e. B<rgAddrMap>)
falls back to a simulation mode with a block of fake IO memory.
The user can also force the simulation mode, e.g. when on a real RPi.

Override:  The automatic derivation may be wrong.
Override of the three essential values is provided by the object
override() functions.

Default:  Default values can be specified for B<RevCode> and B<SocEnum> by
the defaultv() functions.
These values will be used for fallback simulation on a non-Rpi,
and replaced by derived values on a real-RPi.

It is intended that all global configuration/override be done with the
B<rgRpiRev> class before any B<rgAddrMap> class object is constructed.
Non-global data, i.e. in a constructed object, can be manipulated any time.

=head2			Global Data

=over

=item B<rgRpiRev::Global>	- Global data object of this class.

This global data is the intended primary use.  It is a class member (i.e.
qualified by the class name) to avoid additional global names.

=back

=head2			Constructor

=over

=item B<rgRpiRev>()	- Construct and initialize a new object.

This is typically not needed, but is useful for manipulations without
disturbing the global data object B<rgRpiRev::Global>.

=back

=head2			Top Level Class Functions

These all access the B<rgRpiRev::Global> global data object.

=over

=item B<simulate_RevCode>()	- force simulation of RevCode value

=item B<simulate_SocEnum>()	- force simulation of SocEnum value

=item B<simulate>()		- force simulation on current RPi platform

Force simulation of the given SocEnum or RevCode, essentially flagging the
value as Final and Known.  B<BaseAddr> is derived as usual.
The intent is for the library to behave as if the platform was the
specified SocEnum but not actually access any hardware registers.

=item B<find_SocEnum>()		- return B<Global.SocEnum.find>()

=item B<find_BaseAddr>()	- return B<Global.BaseAddr.find>()

=item B<cstr_SocEnum>()		- return C-string for B<Global.SocEnum.find>()

These functions provide a class-level abstraction of the corresponding register
REG.B<find>() functions (see below).
Recommended for user code.

=back

=head2			Common Functions of  RevCode, SocEnum, BaseAddr

All three registers have these basic functions, although the value type may be
different.

=over

=item REG.B<find>()		- Get/find the cached value.

This is a caching accessor to get/derive the register value.
Normally it returns cached value, if marked Final.
If not Final, then derive its value, and mark Final.
If derivation failed, then leave default value and mark Unknown.

=item REG.B<override>( v )	- Configure the cached value.

Put the value into the cache and mark it Final.  Effectively forces the
value that B<find>() will return without derivation.

=item REG.B<defaultv>( v )	- Configure the default value.

This is the default value used when on a non-RPi platform.
Not implemented for B<BaseAddr>, i.e. not needed.

=item REG.B<is_final>()

=item REG.B<is_unknown>()

These accessors observe the Final and Unknown flags.

=back

=head2			SocEnum object Functions

=over

=item B<cstr>()         - return C-string of B<SocEnum.find>() result.

Return the SOC chip name string, e.g. "BCM2835".

=back

=head2			RevCode object Functions

=over

=item B<init_file>( file )	- set revcode file name to read

=item B<init_file>()		- return revcode file name

Accessors to configure the input file name that will be read to get the
revision code.  Default is "/proc/cpuinfo".

=back

=head2			RevCode object Field Accessors

These are the bit-twiddling operations to insert and extract field values
from the register value stored in the object.
They are named according to the field being accessed, and the numeric suffix
is the field width.

    Field               Bits     RPi       Description
    ----------------    ----     --------  --------------------------
    OverVoltageDis_1    [31]     N         Overvoltage disallowed
    OtpWriteDis_1       [30]     O         OTP programming disallowed
    OtpReadDis_1        [29]     Q         OTP reading disallowed
    --                  [28:26]  uuu       Unused
    WarrantyVoid_1      [25]     W         Warranty has been voided
    --                  [24]     u         Unused
    NewStyle_1          [23]     F         new-style revision code
    MemSize_3           [22:20]  MMM       Memory size, encoded
    MfgNumber_4         [19:16]  CCCC      Manufacturer
    ChipNumber_4        [15:12]  PPPP      Processor chip ID number
    BoardType_8         [11:4]   TTTTTTTT  Type
    BoardRev_4          [3:0]    RRRR      Revision

    Word bits:  NOQu uuWu FMMM CCCC PPPP TTTT TTTT RRRR

=over

=item B<RevCode.get_*>()

Extract and return the field value in the object.

=item B<RevCode.put_*>( v )

Insert the given value into the object register field.
Values greater than the field width throw a std::range_error exception.

=back

=head2			Enumerator Conversions

Simple conversion utilities that can be called as class methods or as
object methods.

=over

=item B<soc_enum2cstr>( soc ) - Convert B<Soc_enum> into c-string name.

Return SOC chip name string, which is the enum name without the "soc_" prefix.
Throw std::range_error if enum is invalid.

=item B<int2soc_enum>( num ) - Convert integer to B<Soc_enum>.

Return B<Soc_enum> for a given integer.
Throw std::range_error if there is no enum for that integer.
Note the Soc_enum values are the B<ChipNumber_4> processor chip ID number in
the B<RevCode>.

=back

=head2			Platform IO capability functions

The idea is to have a set of global (static) flags that indicate the current
platform.  If the flag is TRUE, then that is the running platform, else the
platform is unknown.  Unknown is critical here, because future extension may
add new platforms, e.g. RPi6.  Knowing that it is not RPi5 does not imply it
must be RPi4 thru RPi1.

Intended as an alternative to switching on the SocEnum values directly.
We shall see how it works out.

The function names, e.g. ioRPi3(), indicate the IO is like RPi3 for library
purposes.

=over

=item B<initialize_ioRPi>()	- Initialize all ioRPi flags

Constructed global flag values are all false.  This function calls find() on
each register to derive its value and throws an exception if it remains
Unknown.  Any override() and simulate() functions should be called first.

If the ioRPi() functions are not needed, then no need to call this function.

=item B<ioRPiReal>()		- Running on a real RPi

True only if it is a real RPi and not simulation mode.

=item B<ioRPi0>()		- RPi0, 1, 2

=item B<ioRPi3>()

=item B<ioRPi4>()

=item B<ioRPi5>()

True only for the named RPi platform, regardless of simulation.
These in-line functions simply return a global flag.

=back


=head1		EXCEPTIONS

 std::runtime_error
 std::range_error


=head1		RETURN VALUE

Functions are either void, or return valid data.  Exceptions are thrown
where error conditions can be detected.


=head1		EXAMPLES

 #include <stdexcept>
    uint32_t			code;
    uint64_t			addr;
    rgRpiRev::Soc_enum		soc;

 // Find/derive values
    code  = rgRpiRev::Global.RevCode.find();

    soc   = rgRpiRev::Global.SocEnum.find();
    soc   = rgRpiRev::find_SocEnum();		// equivalent

    addr  = rgRpiRev::Global.BaseAddr.find();
    addr  = rgRpiRev::find_BaseAddr();		// equivalent

 // Switch behavior on SocEnum
    switch ( rgRpiRev::find_SocEnum() ) {
      case  rgRpiRev::soc_BCM2835:
      case  rgRpiRev::soc_BCM2836:
      case  rgRpiRev::soc_BCM2837:
	...
	break;
      case  rgRpiRev::soc_BCM2711:
	...
	break;
    }

 // Initialize the platform ioRPi*() functions
    rgRpiRev::initialize_ioRPi();

 // Switch behavior on ioRPi*() functions
    if ( rgRpiRev::ioRPi4() ) {
	...
    }
    else if ( rgRpiRev::ioRPi3() || rgRpiRev::ioRPi0() ) {
	...
    }

 // Extract a RevCode field
    code = rgRpiRev::Global.RevCode.get_MemSize_3();

 // Construct a local object, unrelated to global rgRpiRev::Global,
 //     but has all the same functions.
    rgRpiRev		rvx;
    addr = rvx.BaseAddr.find();
    soc  = rvx.SocEnum.find();
    code = rvx.RevCode.find();
    code = rvx.RevCode.get_MemSize_3();


=head1		FILES

 /proc/cpuinfo

In the librgpio/ source tree:

 src/rgRpiRev.h
 src/rgRpiRev.cpp


=head1		SEE ALSO

 rgAddrMap(3)
 librgpio(3)
 rgpio-info(1)

 [1] BCM2835 ARM Peripherals 2012-02-06  (accessed 2024-04-19)
    https://datasheets.raspberrypi.com/bcm2835/bcm2835-peripherals.pdf

 [2] BCM2711 ARM Peripherals 2022-01-18  (accessed 2024-04-19)
    https://datasheets.raspberrypi.com/bcm2711/bcm2711-peripherals.pdf

 [4] Raspberry Pi revision codes  (accessed 2024-04-19)
    https://www.raspberrypi.com/documentation/computers/raspberry-pi.html#raspberry-pi-revision-codes

 [5] Raspberry Pi OS - vcgencmd  (accessed 2024-04-19)
    https://www.raspberrypi.com/documentation/computers/os.html#vcgencmd

=cut

