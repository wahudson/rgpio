# 2018-06-25  William A. Hudson

# rgAddrMap Address Map class -- Man page
#---------------------------------------------------------------------------
# See also:  perlpod(1)  perlpodstyle(1)

=head1		NAME

rgAddrMap class -- GPIO Address Map

=head1		SYNOPSIS

    #include "rgAddrMap.h"

=head2			Constructor and Configuration

    rgAddrMap();	// constructor
    ~rgAddrMap();	// destructor

    void                config_Debug(    bool v );
    void                config_FakeNoPi( bool v );

    void                config_BaseAddr( uint32_t v );
    uint32_t            config_BaseAddr();

=head2			Device File

    void                open_dev_mem();
    void                open_dev_gpiomem();
    void                open_fake_mem();

    void                open_dev_file(
	const char*             file,
	bool                    drop_cap = 1
    );

    void                close_dev();

=head2			Address Mapping

    volatile uint32_t*  get_mem_block( uint32_t  bcm_addr );
    volatile uint32_t*  get_mem_addr(  uint32_t  bcm_addr );

    uint32_t            bcm2rpi_addr( uint32_t  bcm_addr );

    bool                is_fake_mem();


=head1		DESCRIPTION

This class provides memory blocks that map to GPIO hardware peripherals.
It provides the fundamental access for all the other librgpio peripheral
classes.

The essential operation is to open /dev/mem (or /dev/gpiomem).
Then use mmap(2) system call to map a real address page into this process
virtual memory.  Finally, read/write to addresses in that page go directly to
the peripheral hardware registers.

The object caches each map entry, and will return the same block of memory
if it has already been mapped.

=head2			IO Base Address Derivation

Global data B<rgRpiRev::Global.BaseAddr.find>() is used to derive the
IO base address corresponding to the datasheet doc address (e.g. 0x7e000000
on RPi4 or earlier) on the running RPi platform.
It is called by the constructor to initialize the default B<BaseAddr>.

If override is needed, it should be applied to the global data object
B<rgRpiRev::Global> before B<rgAddrMap> is constructed.
See rgRpiRev(3).

=head2			Privilege Capabilities

The "capabilities" system is used to provide access to /dev/mem for normal
users without using 'sudo' or applying "setuid root" to the executable.
See capabilities(7).

Capabilities 'CAP_DAC_OVERRIDE' and 'CAP_SYS_RAWIO' are necessary to open
/dev/mem for read/write access.  Once the file is open, the capabilities
can be dropped.  The open_dev_file() function raises these two capabilities
from the "Permitted" set into the "Effective" set just before opening, and
drops them afterward.

These capabilities get into the process "Permitted" set by being applied
to the file "Permitted" set on the executable file, e.g. by command:

    sudo setcap 'CAP_DAC_OVERRIDE,CAP_SYS_RAWIO=p'  file

In this way the executing process has no special capability outside of the
open device file function.

=head2			Constructor and Configuration

The constructor takes no arguments.  It creates an object with no device
file open and attributes initialized as follows:

    Debug     = 0,  off
    FakeNoPi  = 1,  fall-back to fake memory
    BaseAddr  = real IO base address
    DocBase   = documentation base address
    BlockSize = size of mapped block in bytes

    BaseAddr      DocBase     BlockSize  Platform
    ------------  ----------  ---------  --------
    0x20000000    0x7e000000  0x1000     RPi0 (BCM2835)
    0x3f000000    0x7e000000  0x1000     RPi3 (BCM2837), RPi2 (BCM2836)
    0xfe000000    0x7e000000  0x1000     RPi4 (BCM2711)
    0x1f00000000  0x40000000  0x4000     RPi5 (BCM2712) 64-bit address

    Configuration is derived from the B<rgRpiRev> class global data,
    which is accessed only at construction.

If needed, the following config_*() functions are intended to be called once
before the device file is opened:

=over

=item config_Debug()

Set debug mode, 1= on, 0= off (default).
When Debug is TRUE, debug output on stderr is enabled.  Currently this
is comments on the "capabilities" raise/lower in the process of opening
the device file.

=item config_FakeNoPi()

Configure fall-back action when not on a Raspberry Pi:  1= fake memory
(default), 0= throw error.
Applies only when a real file is opened, i.e. open_dev_mem(), or
open_dev_gpiomem().

=item config_BaseAddr()		get/set real IO BaseAddr

Call with no argument to return the current BaseAddr.
Call with an argument to configure the real IO base address to be used.
A null address will cause a fake memory block to be used regardless of the
device file opened.

=back

=head2			Device File

These functions open the specified device file, and are the preferred user
interface.

=over

=item open_dev_mem()

Open "/dev/mem", providing full access to all hardware peripherals.

=item open_dev_gpiomem()

Open "/dev/gpiomem", providing access only to the GPIO pin functions.

=item open_fake_mem()

Open a fake memory block, no device file.  The same memory block is used
for all peripherals.  Used for development and testing.

=back

This is the underlying function when more control is needed.

=over

=item open_dev_file()

Open device file for IO memory map.
Argument 'file' is the file path to open.  The 'drop_cap' flag indicates
whether the "capabilities" for accessing /dev/mem should be raised/lowered
(1= raise/drop capabilities, 0= not).
The flag defaults to 1, and is provided to allow disabling the raise/drop
of capabilities in case the user needs to manage it himself.

=item close_dev()

Close the device file descriptor.
Apply when no new blocks need to be mapped.
Existing blocks can still be used.
The object destructor will also close the device file, so calling this
function is not required.

=back

=head2			Address Mapping

These functions map an IO address block into the process address space
returning a pointer corresponding to the given documentation address.
The argument "bcm_addr" is the full 32-bit address given in the BCM doc
(for RPi4 and earlier) or in the Raspberry Pi RP1 doc (for RPi5).

=over

=item get_mem_block()

Get pointer to a peripheral memory block.
The argument is the datasheet address, block aligned.
The returned address points to the beginning of the block, word aligned.

Note the underlying real IO memory block is block aligned, but the resulting
mapped virtual address region is only word aligned.
Thus offsets should be computed by addition, not bit masking.

If the address has already been mapped, that block is returned.  Otherwise,
if the device file is still open, the address is mapped into a new block with
the mmap(2) system call.

=item get_mem_addr()

Get pointer to a peripheral memory block - word address.
The memory block is the same as in B<get_mem_block>() above, but the returned
address has the same word offset within the block (region) as the argument.
Primarily for RPi4.

=item is_fake_mem()

Return TRUE if using fake memory.

=item bcm2rpi_addr()

Convert datasheet documentation address to a Raspberry Pi real address.
See also BCM doc or RP1 doc below.
Mostly for internal use.

=back

=head1		EXCEPTIONS

 std::domain_error
 std::logic_error
 std::range_error
 std::runtime_error

=head1		RETURN VALUE

Functions are either void, or return valid data.  Exceptions are thrown
where error conditions can be detected.


=head1		EXAMPLES

This is the full sequence of operations.

 // Configure rgRpiRev only if overrides are needed.
    rgRpiRev::Global.BaseAddr.override( 0x3f000000 );

 // Construct object.
    rgAddrMap		amx;		// address map object

 // Inspect derived condition
    uint32_t		addr = amx.config_BaseAddr();
    bool		fake = amx.is_fake_mem();

 // Configure, if needed.
    amx.config_Debug( 1 );
    amx.config_FakeNoPi( 0 );
    amx.config_BaseAddr( 0x20000000 );

 // Open device file.
    amx.open_dev_mem();

 // Get pointer to peripheral memory block for GPIO pins.
    volatile uint32_t*		base_addr;
    base_addr = amx.get_mem_block( 0x7e200000 );

 // Close device file, if needed, after all new maps.
    amx.close_dev();


=head1		ENVIRONMENT

none


=head1		FILES

 /dev/mem
 /dev/gpiomem

In the librgpio/ source tree:

 src/rgAddrMap.h
 src/rgAddrMap.cpp


=head1		SEE ALSO

 rgpio(1), rgRpiRev(3), librgpio(3), capabilities(7), setcap(8)

 BCM doc:  BCM2835 ARM Peripherals (06 February 2012)
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

 BCM doc:  BCM2711 ARM Peripherals (2020-10-16)
    http://datasheets.raspberrypi.org/bcm2711/bcm2711-peripherals.pdf

 RP1 doc:  Raspberry Pi RP1 Peripherals (2023-11-07 Draft)
    https://datasheets.raspberrypi.com/rp1/rp1-peripherals.pdf

 https://elinux.org/BCM2835_datasheet_errata

=cut

