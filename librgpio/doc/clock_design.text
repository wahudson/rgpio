2019-11-25
		rgpio - Clock Manager Design
		----------------------------

Raspberry Pi GPIO Tool and Library

See also:  doc/architecture.text

References:
-----------
BCM2835 ARM Peripherals
    Referenced by RaspberryPi.
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

https://elinux.org/BCM2835_datasheet_errata

See:  p.105-108  6.3 General Purpose GPIO Clocks

----------------------------------------------------------------------------
## Discussion - Clock Manager
----------------------------------------------------------------------------

    This design is based on the rgRegister class.  It was done after the
    original General Purpose Clock class rgClock described in
    doc/architecture.text.

    The General Purpose, PWM, and PCM clock managers are all the same.
    Thus it makes sense to have a common base class for them.

Possible base Class Names:
    rgClock
    rgClk
 >  rgClkMan
    rgClkBase
    rgClkman
    rgClkbase

    The base class operates one complete clock manager, but does not have
    the specific address.

Derived class names:
    rgClkN	the General Purpose clocks Clk0, Clk1, Clk2
 >  rgClk
 >  rgClkPwm
 >  rgClkPcm

    The derived classes know the specific clock manager addresses.
    The rgClkN class also has a ClkNum identifier, hence the 'N'.
    Decided to call it rgClk, to keep it simple.

    Possibly the ClkNum concept could be extended to include the PWM and PCM
    clocks, but it seems artificial to introduce arbitrary numbers for them.

    However, it does seem good for an object to be able to identify itself.
    This is commonly done with the feature address.  It might be nice to
    have a more abstract human sensible identification in addition.  This
    would allow having just one derived class, or even avoid need for a
    base class altogether.  [This was the original rgClock design.]

    The PWM clock manager could be an object in the PWM feature.  This would
    make clear association without extra fuss.  But it would create some
    stamp coupling that might not be desired.

    The feature derived classes should probably have their own file,
    especially rgClkN.  Possibly rgClkPwm could be in the PWM feature file.

    The register derived classes will be in the rgClkMan feature base class
    file to avoid explosion of files.

Alternative class designs:

 >  A) rgClkMan  base class
	+ Base class is more generic.
	- Require derived classes.
	+ Is a more object-oriented way.
	- Uses inheritance, a little more complex concept.
	+ Good learning example, inheritance seems appropriate.
	+ Better flexibility for derived class variation.  Unexpected future.

    B) rgClock  feature class with specific identifier
	+ Only one feature class.  Fewer classes.
	- Specific instance identification adds complexity.
	+ More obvious, as everything is in one class.
	+ Address identification is all in one place.

    Essentially two methods for identifying specific object instances.
    I feel like the base class is the way to go (2019-11-25).

Enum for specific Clock Manager identification:

    enum rgClkMan_enum {
	cm_Clk0  = 0x70 /4,
	cm_Clk1  = 0x78 /4,
	cm_Clk2  = 0x80 /4,
	cm_Pcm   = 0x98 /4,
	cm_Pwm   = 0xa0 /4,
    }

    The enum could also be the feature offset to the pair of registers,
    similar to rgIoPin class.

Documentation:
    Man page sections:

    rgClkMan(7)     - describes BCM hardware function
    rgClkMan(3)     - describes librgpio API calls, and limited function
    rgpio_clock(1)  - describes rgpio clock command, and limited function

    rgClkN(3)       - General Purpose Clocks (derived class)

    The derived class should reference the base class doc, and not reproduce
    all the inherited functions.  Maybe just list them for reference?

Operation with rgpio:
    A) Use only base field name
	% rgpio clock  --Enable_1=1

    B) Use register prefix.  The dot looks good.
	% rgpio clock  --Cntl.Enable_1=1

    The rgClkPwm and rgClkPcm are probably best operated from the 'clock'
    sub-command to avoid duplication of options and output formatting.
    Clock manager identification options could be:  -0 -1 -2  --pwm  --pcm

Register addresses:  (BCM doc)
    See:
    BCM2835 Audio & PWM clocks, G.J. van Loo, 6 February 2013
    https://www.scribd.com/doc/127599939/BCM2835-Audio-clocks

			General Purpose clocks
    0x7e101070  CM_GP0CTL
    0x7e101074  CM_GP0DIV
    0x7e101078  CM_GP1CTL
    0x7e10107c  CM_GP1DIV
    0x7e101080  CM_GP2CTL
    0x7e101084  CM_GP2DIV

			PCM  Pulse Code Modulation
    0x7e101098  CM_PCMCTL
    0x7e10109c  CM_PCMDIV

			PWM  Pulse Width Modulation
    0x7e1010a0  CM_PWMCTL
    0x7e1010a4  CM_PWMDIV

----------------------------------------------------------------------------
## Operation - Clock Manager
----------------------------------------------------------------------------

Input clock sources:  [See:  https://pinout.xyz/pinout/gpclk]

    Src     Freq    Description
    ---   --------  -----------
    0        0 Hz   Ground
    1     19.2 MHz  oscillator
    2        0 Hz   testdebug0
    3        0 Hz   testdebug1
    4        0 Hz   PLLA
    5     1000 MHz  PLLC (changes with overclock settings)
    6      500 MHz  PLLD
    7      216 MHz  HDMI auxiliary
    8-15     0 Hz   Ground

Output frequency:
    Fout = Fsource / DIVI			with no MASH
    Fout = Fsource / (DIVI + (DIVF / 4096))	average with MASH

    [Note BCM doc error (DIVF / 1024), is wrong as DIVF is a 12-bit value.]

Operation:
    There are restrictions on when IO register fields may change in order to
    avoid glitches and potential lock-up of the clock generator.
    Generally, the clock must be disabled, and have have become not busy
    (BUSY=0) before changing any config.

Passwd:
    The Passwd field in each register provides some protection against
    accidental modification.  It must be set to 0x5a in order for a write
    to the register to be effected.

Experiments:  (2019-12-30)

    Invert clock (Flip_1):
	This bit does not seem to work, at least not store a value.
	At one point using Kill_1 did manage to set Flip_1=1.

    Kill clock (Kill_1):
	Kill_1 is NOT one-shot, it retains the value written.
	It does seem to stop and reset the generator, making Busy_1=0.
	It does not clear Enable_1.

	In one case, changing to an inactive source Source_4=4 while still busy
	resulted in the clock output stuck high and Busy_1=1.  No amount of
	enable/disable would clear it.  Using Kill_1 did clear it.

    Inactive Source:
	If an inactive source is selected, the output stays low and not busy
	(Busy_1=0).  Thus changing away from an inactive clock is always OK.

    Modify while Busy:
	When Busy_1=1, writing DivI_12 changes the register value, but the
	clock frequency does not change.  This is a confused state!
	Disable and re-enable (with Busy_1=0) seemed to fix it.

	Even writing the same register values when Busy would sometimes
	result in the wrong frequency output.

	Thus it seems very important to wait for not Busy!

    Frequency measurements:  Raspberry Pi3, DivI_12=1000
	Source_4=1   19.20  kHz  52.084 us
	Source_4=5   1.000  MHz  1.000  us
	Source_4=6   500.0  kHz  2.000  us
	Source_4=7   3.9375 kHz  253.97 us

    Loop time in wait_while_busy():
	With WaitTime_ns=0, WaitCount=1000.  No compiler optimization.
	Each loop iteration is about 365 ns/BusyCount.
	With g++ -O3  each loop is about 313 ns/BusyCount, which is about
	the intrinsic IO read time of Cntl.grab() (which dominates any other
	instructions in the loop).

	BusyCount was < 600 in many interactive trials with rgpio-clk.
	WaitCount=1000 seems adequate.

	Just using WaitCount seems very effective, and no need for
	nanosleep().

----------------------------------------------------------------------------
## Base Class Design - Clock Manager
----------------------------------------------------------------------------

Register Names:

    rgClkMan	BCM	Description
    --------	----	------------------
    Cntl	CTL	Control register
    Divr	DIV	Divider register

    Choose Cntl as a more common abbreviation of Control, and it matches other
    feature control registers.

    Choose Divr because it matches length of Cntl, and it is a bit quirky.
    Some alternatives considered are:  (not used)

	Ctl
	Div
	Divide
	Divd
	Divr
	DivR	camel-case looked too busy
	Divi
	Divid
	DivReg

    Register names are public objects derived from base class rgRegister.
    They are visible to the user, and should be meaningful when viewed at
    the user call point.

    BCM document typically prefixes their names with "CM_GPx".
    No global prefix is needed here because the use is qualified by the class.

Field Names:

    These field names are used in the get_(), put_() accessor functions
    and in the options and output of the rgpio program.

     Reg.Field			Bits    BCM		possible alternatives
    ----.---------------	----    -----
    Cntl.Passwd_8		[31:24] PASSWD  (WO)
    Cntl.Mash_2			[10:9]  MASH
    Cntl.Flip_1			[8]     FLIP
    Cntl.Busy_1			[7]     BUSY    (RO)
    Cntl.Kill_1			[5]     KILL
    Cntl.Enable_1		[4]     ENAB
    Cntl.Source_4		[3:0]   SRC

    Divr.Passwd_8		[31:24] PASSWD  (WO)
    Divr.DivI_12		[23:12] DIVI		DivInt_12
    Divr.DivF_12		[11:0]  DIVF		DivFrac_12

    (WO) = Write-only, (RO) = Read-only, otherwise all fields are read-write.

    Abbreviations appropriate for this context are:
	Div    Divider
	Int    Integer
	Frac   Fraction

    DivI_12, DivF_12
	I like these names for being short and same length, and was used in
	the previous rgClock class.  The I and F are potentially a bit cryptic.
	Although the longer alternatives  DivInt_12, DivFrac_12  are more
	descriptive.

Function Names:

    All register and field accessor functions are methods of each register
    object.

    The full register operations are inherited from rgRegister class.
    These are:

	addr()		return address of hardware register

	read()		direct read  of hardware register
	write(V)	direct write of hardware register

	get()		get object register value
	put(V)		put value into object register

	grab()		copy hardware register into object
	push()		copy object into hardware register

    Another name for "grab" is "pull", but I like the quirkyness of "grab".

    Field accessor functions are defined in each register derived class.
    These are named like:  (same as rgUniSpi)

	get_FIELD_N()	get object FIELD value of width N
	put_FIELD_N(V)	set object FIELD value of width N

Password access of registers:

    Derived register classes could add functions for applying the password
    on the value being written.  Make register writes more convenient.

    A) New function pw_write()
	+ write() is as defined in base class, does not force password.
	+ User is made aware that password is being applied.

    B) Overload rgRegister::write(), new raw_write()
	+ write() actually does the write.
	- User is not aware that password is being applied.
	+ Could use rgRegister::write() for the raw write.
	- Making rgRegister::write() 'virtual' opens up other changes.

    Another way is an apply() function that changes the passwd field in
    the object register, then writes the hardware register.  Leave the
    register base class write() and push() as the raw operations.
    This idea also applies to setting reserved fields zero.

 >  C) Virtual apply() sets passwd in object, then calls write().
	+ apply() is a natural companion for push().
	+ push() and write() remain raw operations.
	+ Passwd value remains in register object for user reference.
	- Combines object modification and hardware register update.

    Function set would be:  (all have no arguments)
	set_passwd()	- set passwd field in register object
	zero_reserved()	- zero reserved fields in register object
	apply()		- modify passwd + reserved and write hardware

 >  Possibly overload put_Passwd_8() with no argument to set the default
    password.  While that seems a bit non-uniform, the stronger association
    is more beneficial.

Reserved Fields:

    Many registers have unused bits that are generally defined as "reserved".
    The BCM doc typically specifies that reserved fields should be "write
    as 0, read as don't care".  This provides some potential compatibility
    for a future hardware change to add new control bits.

    An idea is to define a zero_reserved() function in each register class
    that would set all the register object reserved bits to zero (e.g.
    AND with a mask).  This provides low-level operation.

	void
	zero_reserved() {
	    put( get() & 0xff0007df );	// bits [23:11,6]
	};

    An apply() function in each register class could then call zero_reserved()
    and then push() the object value to the hardware register.  This has a
    useful result of leaving the actual value written to the hardware in
    the object register.

	void
	apply() {
	    zero_reserved();
	    put_Passwd_8();
	    push();
	};

    Is it worthwhile trying to write zero on reserved fields?

    A) Zero reserved fields.
	+ Provides possible future compatibility.
	- More complexity and more code.
	- Testing of reserved bits - more work.
	-- Consequence of errors in reserved bit mask value.
	- Future hardware change may not be compatible anyway.
	- Still need to inspect the future hardware change.

 >  B) Write reserved fields as may be.
	+ Less complexity, less code.
	+ Register constructor initializes reg value to zero.
	+ Read typically returns zeros in reserved fields.
	+ Natural read/write is more correct for normal control bits.
	- A future hardware change may need code change.
	+ The future is not predictable.
	+ The future change may never come.

    Regular read/write control bits:  Typically writing back the value read
    is exactly what is wanted.  If the new bit read as 1, then zero_reserved()
    would clear it (not desired).

    One-shot error flags (like in PWM):  These flags typically are 1 when
    an error occurred.  Writing 0 does nothing, writing 1 clears the error
    and future reads return 0 until an error occurs.
    Simply writing back the read value will clear these flags (not desired,
    but not harmful either).
    The zero_reserved() method would work better for these bits.

    Thus each method can fail to future proof depending on the new bit
    behavior.

    Overall I think the zero_reserved() idea has the more future risk.
    Adding complexity now to protect against the future is not worthwhile.
    Decide to do (B), i.e. do nothing.

Register Field Classes:

    These derive from rgRegister and are named:
	rgClk_Cntl
	rgClk_Divr

    Following the convention of the feature class rgClk_ followed by the
    register name.  They are not nested in a parent class for simplicity
    and flexibility.  Note in the case of multiple derived clock manager
    classes, the register class name cannot match each feature class.
    For this reason, I am favoring naming the enumerated clock class
    "rgClk" to match.

Register class apply() function:

    Define apply() in the specific (derived) register class to do any
    generally useful operation to the object register before push() to the
    hardware register.  e.g. Apply default pass word value.

    Decided to not put a default apply() in the rgRegister base class.
    This makes it more obvious when apply() actually does something
    different.

Special apply_nicely():

    Function to help safely apply object to the hardware registers.

    The BCM doc is pretty clear that virtually all register fields should
    not be changed while the clock is busy (enabled).  In addition the
    Mash_2 and Source_4 fields should not be changed at the same time as
    asserting Enable_1 (enabling the clock).  Consequences range from
    glitching the output clock, to locking up the clock generator.

    Experiment seems to indicate some fields (like DivI_12) cannot be
    changed when the clock is enabled (Enable_1=1) - i.e. the register has
    the new value, but the clock frequency does not change.

    This function carries out the following steps on the hardware register
    to meet these requirements:
	1) If (Enable_1 == 1), then disable clock by setting Enable_1=0.
	2) Wait until (Busy_1 == 0), or timeout.
	3) Apply requested Cntl and Divr registers, but with Enable_1=0.
	4) If Enable_1=1 was requested, then set it.

    If timeout occurs and the clock is still busy, the function continues
    to apply the requested values anyway, and returns the busy status.
    Alternatives are to throw an exception, or simply return failure,
    neither of which seem very helpful.  Need more experimentation to see
    how it behaves.

    After experiments (2019-12-30), it looks like modifying registers
    (even with the same value) can lead to wrong frequency clock output,
    and possibly a hang that needs Kill to recover.

 >  Decided timeout should return with busy=1 and NOT set registers - let
    user decide what to do.  Leave clock disabled.

    The function name was chosen to indicate goodness without any guarantee.
    The intent is to change the function if better methods are found.

Special wait_while_busy():

    Function to wait until (Busy_1 == 0) or a timeout is reached.  This is
    a bit tricky, so it was encapsulated in a single place.

    The idea is to have a wait loop inspecting Busy_1 on each cycle.
    Timeout is provided as a sleep time each cycle and a limit on number of
    cycles.  These attributes in the object allow configuration without
    having to pass values down to the wait function as function arguments.

	WaitCount   = limit number of wait cycles, 0= no wait
	WaitTime_ns = nanoseconds to delay each cycle, 0= none

    The function returns the Busy_1 state on timeout.  This way the caller
    can take any additional action desired.

----------------------------------------------------------------------------
## Derived Classes - Clock Manager
----------------------------------------------------------------------------

Address Initialization:

    There are multiple clock manager objects, each with a different set of
    register addresses within the same feature page address.
    e.g. Clk0, Clk1, Clk2, cmPWM, cmPCM.

    Each clock manager operates the same, so it makes sense to represent
    that with a base class, and let each specific derived class specify
    the actual register addresses.

    We want the specific objects to be fully initialized at construction.
    This makes use (once constructed) easier, and operations need not
    repeatedly check for initialization.

    Now the base class constructor cannot initialize addresses because the
    register offset is not yet known.  Thus the derived class must initialize
    addresses after base class construction.

    The essential address assignment of registers is:

        GpioBase = amx->get_mem_block( FeatureAddr );

	Cntl.init_addr( GpioBase + Cntl_offset );
	Divr.init_addr( GpioBase + Divr_offset );
	...
    where
	amx         = rgAddrMap pointer
	FeatureAddr = BCM doc page address of the feature
	*_offset    = Register offset from page address

    It seems best to simply let the derived class do this.  There is not
    much help the base class could provide without adding more indirection.

Purpose of Base Class:

    When there are multiple feature objects it may be useful to make derived
    classes for each one.  This gives flexibility to customize some for
    specific behavior.  e.g.  The Clk0, Clk1, Clk2 objects could be a
    single indexed class, while allowing cmPWM to be a separate class.

 >  A) rgClkMan virtual base class
	- Require derived classes.
	+ A common base for various specific clock managers.

    B) Separate rgClkPwm, rgClkPcm classes
	- Seems redundant to have separate classes for essentially the
	    same thing.
	+ Flexibility for unexpected divergence.
	o These could derive from rgClkN, or a base class.

 >  C) Indexed rgClkN class
	- Need enum indexing scheme.
	+ Objects better fit natural model of a single class.
	- Hard to customize if features diverge in functionality.
	+ Index is handy to track full set of objects.
	o Could derive from rgClkMan base class.

    Decide to essentially do both.  Gives best flexibility.

    Deriving objects from the base class is not that useful, since the
    addresses are not initialized.

Possible derived classes:

    These derive from the rgClkMan base class to make a specific feature.
    They know the addresses of their registers (the base class does not).

rgClkMan	base class
{
    rgClk_Cntl			Cntl;	// registers
    rgClk_Cntl			Divr;
}

rgClkPwm	a single clock manager
{
    volatile uint32_t		*GpioBase;
    static const uint32_t	FeatureAddr  = 0x7e101000;
    static const uint32_t	Cntl_offset  = 0xa0;
    static const uint32_t	Divr_offset  = 0xa4;
    ...  inherited from rgClkMan

    Constructor:
        GpioBase = amx->get_mem_block( FeatureAddr );
	Cntl.init_addr( GpioBase +     Cntl_offset );
	Divr.init_addr( GpioBase +     Divr_offset );
}

rgClk		enumerated clocks {Clk0, Clk1, Clk2, ...}
{
    volatile uint32_t		*GpioBase;
    static const uint32_t	FeatureAddr  = 0x7e101000;
    rgClk_enum			ClkEnum;	// Clock number
    ...  inherited from rgClkMan
}

    Possibly put these simple derived classes in the same file as the
    base class, just to avoid file explosion.
    OR better put all classes in rgClk.h file, which better fits the style
    of other features.  It also makes the base class more of an
    implementation detail.

Enumerated clock managers:

    The enum could be designed to index small arrays for looking up
    register offsets or string names.
    Let Clk0, Clk1, Clk2 be integers {0, 1, 2} for easy mapping of those
    features.

	enum rgClk_enum {
	    cm_Clk0 = 0,
	    cm_Clk1,
	    cm_Clk2,
	    cm_ClkPcm,
	    cm_ClkPwm
	};

    Nest these enums in the rgClk class to help limit name space pollution
    and help identify what they go with.  This means enum use text is longer,
    but more specific:  e.g.  rgClk::cm_Clk2

----------------------------------------------------------------------------
## enum Anti-bugging
----------------------------------------------------------------------------

    Enumerators are a great way to name individual things in a set.
    Here we think about anti-bugging when future changes add or delete
    individuals from the enum set.  Some thoughts:

  a) Embed enum in a class to avoid name space pollution.
    The class qualification also makes it obvious to not compare enums from
    different classes.  A unique prefix string on the enum name also helps.

  b) Passing enum as a function argument.
    Compiler does type checking, so is pretty safe.
    Beware an explicit cast of an integer to enum defeats this check, and
    is generally not safe.

  c) Enums promote to integer in many situations, e.g.
	in comparison   (e1 == e2)
	in array index  arr[e]
    Be aware.  Maybe use an "enum class".

  d) Switch statement:  switch (e) {...}
    Compiler checks that all enum values are compared in "case:" statements,
    but only if no "default:" statement is present.
    This catches any added or deleted enums.
    Independent of enum ordering.
    Enums need not be in a continuous range.
    Is a very safe way to operate with a set of enums.

  e) Looping by enum value:
	for ( enum e = e_Min;  e <= e_Max;  e++ ) {...}
    Need to know what e_Min and e_Max are, which could be defined as alias
    values for the actual minimum and maximum enum names.
    Other issues are:
    1) The enum set must be a packed range.
    2) The increment operator must be defined for the enum.
    This seems like a reasonably safe loop and the loop index is an enum.

    The loop could increment an integer, but then need need an int to enum
    conversion function:
	for ( int i = e_Min;  i <= e_Max;  i++ ) {
	    enum	e = int2enum( i );
	}

  f) Indexing an array by enum:  arr[e]
    An array is a convenient way to map enums to other things (e.g. string
    names).  Practical if enums are restricted to a packed range of integers.
    Some issues are:
    1) The array is actually indexed by the integer value promoted from enum.
    2) Array entry order must match enum value order.
    3) Array bounds checking, i.e.  against (0 .. e_Max)
    4) Holes in enum range, i.e. missing array values.

    Array indexing is attractive because of the apparent simplicity of
    using an array initializer list in enum order.  This can work well
    in the beginning of a project if the enums never change.  However,
    when enums must be added or deleted, it becomes a problem tracking
    down the corresponding places that must also change.

  g) User cast an int to enum:
    The enum can thus be any value (not a valid enum name).
    Checking range on packed enum is somewhat practical.
    Validating against all enum names is generally not practical.
    Thus probably best to not guard against this, and let the user get
    what he deserves.

Conclusions:
    Use good judgment.  Be aware of issues.  Test thoroughly.

    Define enums carefully with guidance for reasonable future change.
    Within the library things should be well controlled and even array
    indexing can be managed.

    User code should prefer switch statement over array indexing.

    I tried both switch statement (d) and array indexing (f) in class rgClk
    (2019-12-28).  The switch is definitely more robust and does not need
    run-time checks.

----------------------------------------------------------------------------
## rgClk  Derived Class - enumerated Clock Manager
----------------------------------------------------------------------------

rgClk		derived class
{
    enum rgClk_enum { ... };		// enumeration names

    rgClk_enum		ClkEnum;	// Clock number

    volatile uint32_t	*GpioBase;	// IO base address
    uint32_t		FeatureAddr;	// BCM doc base address

  Constructor:
    rgClk( rgClk_enum clknum, rgAddrMap* xx )

  Methods:
    get_clk_enum()		get ClkEnum
    get_base_addr()		GpioBase address
}

----------------------------------------------------------------------------
## rgClkMan  Base Class - Clock Manager
----------------------------------------------------------------------------

rgClkMan	base class
{
    rgClkMan_Cntl	Cntl;		// Control  register
    rgClkMan_Divr	Divr;		// Divisor  register

    int			BusyCount;	// Number of read_Busy() calls in last
					//    wait_disable() or apply_regs().
  Constructor:
    rgClk()		// no address initialization
}

Methods:  (in addition to rgRegister base class)

			Direct control:  (modify register fields)
    enable_clock()		Set Enable=1
    disable_clock()		Set Enable=0
    wait_disable()		Set Enable=0, wait for not Busy.

    wait_while_Busy()		Wait for not Busy.  Handle Enable=1

    kill_generator()		Kill the clock generator.

			Object state operations:
    init_put_reset()		Object registers set to power-on reset state.
 ?  init_put_zero()		Object registers set to zero.

    grab_regs()			Read all registers into object.
    push_regs()			Write object to hardware registers.

    apply_regs()		Safe apply obj to registers - disable,
					wait for not Busy, write.

			Field accessors of object state:
    get_()
    put_(V)
    ...

	rgClk_Cntl

    Cntl.get_Passwd_8()		[31:24]  (WO)
    Cntl.get_Mash_2()		[10:9]
    Cntl.get_Flip_1()		[8]
    Cntl.get_Busy_1()		[7]      (RO)
    Cntl.get_Kill_1()		[5]
    Cntl.get_Enable_1()		[4]
    Cntl.get_Source_4()		[3:0]

	rgClk_Divr

    Divr.get_Passwd_8()		[31:24]  (WO)
    Divr.get_DivI_12()		[23:12]
    Divr.get_DivF_12()		[11:0]

