2019-10-27
			Memory Barrier
			--------------

Application of memory barrier instruction.

see:  BCM doc (p.7)
    "1.3 Peripheral access precautions for correct memory ordering"

----------------------------------------------------------------------------
## References
----------------------------------------------------------------------------

Memory barrier
    https://en.wikipedia.org/wiki/Memory_barrier

Google:  gcc __sync_synchronize

Memory Ordering at Compile Time
    https://preshing.com/20120625/memory-ordering-at-compile-time/

GCC memory barrier __sync_synchronize vs asm volatile("": : :"memory")
    https://stackoverflow.com/questions/19965076/gcc-memory-barrier-sync-synchronize-vs-asm-volatile-memory

User-space RCU: Memory-barrier menagerie
    https://lwn.net/Articles/573436/

LINUX KERNEL MEMORY BARRIERS
    https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/Documentation/memory-barriers.txt

----------------------------------------------------------------------------
## Usage
----------------------------------------------------------------------------

The bcm2835 library uses:
    __sync_synchronize();

Gnu g++ has built-in functions:
    https://gcc.gnu.org/onlinedocs/gcc/_005f_005fsync-Builtins.html

    __sync_synchronize (...)
    This built-in function issues a full memory barrier.


Experiment:  on X86 laptop

    mem_barrier.cpp
    ---------------
    int main()
    {
	int a;
	a += 1;
	__sync_synchronize();
    }

    % g++ -S mem_barrier.cpp

    Output shows it issues an "mfence" instruction.

