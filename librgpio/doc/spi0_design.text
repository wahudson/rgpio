2019-10-14
		rgpio - SPI0 Master Design
		--------------------------

Raspberry Pi GPIO Tool and Library

See also:  doc/architecture.text

References:
-----------
BCM2835 ARM Peripherals
    Referenced by RaspberryPi.
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf
    See:  p.148-159  ch 10. SPI

https://elinux.org/BCM2835_datasheet_errata

https://en.wikipedia.org/wiki/Serial_Peripheral_Interface_Bus
    [2]  SPI Block Guide v3.06; Motorola/Freescale/NXP; 2003.

https://www.raspberrypi.org/documentation/hardware/raspberrypi/spi/README.md

https://elinux.org/RPi_SPI

https://learn.sparkfun.com/tutorials/raspberry-pi-spi-and-i2c-tutorial


----------------------------------------------------------------------------
## Discussion - SPI0 Master
----------------------------------------------------------------------------

This is SPI0, the SPI master with DMA.
It is less general than the SPI1, SPI2 Universal SPI Masters.

Possible Class Names:
 >  rgSpi0		SPI0, clear designation
    rgSpi		seems ambiguous

 >  rgUniSpi		SPI1, SPI2

Documentation:
    Where to put detailed documentation on Spi operation and configuration?
    Man page sections:

    rgSpi0(7)      - describes BCM hardware function
    rgSpi0(3)      - describes librgpio API calls, and limited function
    rgpio-spi0(1)  - describes rgpio spi0 command

    Probably want a separate source describing operation.  The Library, and
    the utility 'rgpio' command both do the same operations, and thus have
    a lot of overlap.  Let them both reference section (7) for hardware
    behavior.

Operation with rgpio:
    % rgpio spi0  --RunActive_1=1  --debug

----------------------------------------------------------------------------
## Operation - SPI0 Master
----------------------------------------------------------------------------

There are two ways the data lines can be configured:
    A) MISO, MOSI - Two uni-directional lines as in Standard SPI.
    B) MIMO - Bidirectional on a single wire.

There are 3 major modes of operation:  (BCS ch 10.6)
    A) Standard (Polled/Interrupt) mode
    B) LoSSI (Low Speed Serial Interface) mode
    C) DMA (Direct Memory Access) mode

    A SPI transaction framed by CS is controlled by software, not by FIFO.
    Thus the FIFO is nearly useless, except for packing more bits into a
    transaction.

    DMA can use full 32-bit word width of FIFO, but polled operation can
    only write single bytes to FIFO ???


----------------------------------------------------------------------------
## Class Design - SPI0 Master
----------------------------------------------------------------------------

    Names of registers and bit-fields in the BCM documentation are rather
    short and confusing when out of context.  Choose better names that are
    more meaningful at the program call point.

Register names:

    rgSpi0		BCM	Description
    ------------	----	------------------
    CntlStat		CS	Control and Status
    Fifo		FIFO	TX and RX FIFOs
    ClkDiv		CLK	Clock Divider
    DmaLen		DLEN	DMA Data Length
    Lossi		LTOH	LoSSI mode Control
    DmaReq		DC	DMA DREQ Controls

    Register names are public objects derived from base class rgRegister.
    Thus want good name choices when viewed at the user call point.

    BCM document typically prefixes their names with "SPI_".
    No global prefix is needed here because the use is qualified by the class.

    Note read/write of the Fifo register has side effects (e.g. delete fifo
    entry on read).

Field Names:

    These field names are used in the get_(), put_() accessor functions
    and in the options and output of the rgpio program.

     Reg.Field			Bits    BCM     possible alternatives
    ----.---------------	----    -----   ------------------------------
    CntlStat.LossiWord_1	[25]  LEN_LONG	LossiWordLen_1  LossiLength_1
    CntlStat.LossiDmaEn_1	[24]  DMA_LEN
    CntlStat.CsPolarity_3	[23:21]  CSPOL2,CSPOL1,CSPOL0
    CntlStat.RxFullStop_1	[20]  RXF  (RO)	RxFull_1  RxFullStopped_1
    CntlStat.RxHalf_1		[19]  RXR  (RO)	RxHalfFull_1  RxPartFull_1
    CntlStat.TxHasSpace_1	[18]  TXD  (RO)
    CntlStat.RxHasData_1	[17]  RXD  (RO)
    CntlStat.TxEmpty_1		[16]  DONE (RO)	TransferDone_1  TxDone_1
						    TxStopped_1 Tx_Emptied_1
    CntlStat.LossiEnable_1	[13]  LEN
    CntlStat.ReadEnable_1	[12]  REN
    CntlStat.DmaEndCs_1		[11]  ADCS	AutoCs_1  DmaAutoCs_1
    CntlStat.IrqRxHalf_1	[10]  INTR	IrqRxHalf_1  IrqRxPartFull_1
    CntlStat.IrqTxEmpty_1	[9]   INTD	IrqDone_1  InterDone_1
    CntlStat.DmaEnable_1	[8]   DMAEN
    CntlStat.RunActive_1	[7]   TA	TransferActive_1  TransActive_1
						    RunTA_1
    CntlStat.CsPolarity_1	[6]   CSPOL	CsPolarityAll_1
    CntlStat.ClearRxTxFifo_2	[5:4] CLEAR	ClearRxFifo_1,ClearTxFifo_1
    CntlStat.ClockPolarity_1	[3]   CPOL	ClockPol_1  ClockPolar_1
    CntlStat.ClockPhase_1	[2]   CPHA
    CntlStat.ChipSelectN_2	[1:0] CS

    ClkDiv.ClockDiv_16		[15:0]  CDIV

    DmaLen.DmaDataLen_16	[15:0]  LEN

    Lossi.LossiHoldDly_4	[3:0]   TOH

    DmaReq.DmaRxPanicLev_8	[31:24] RPANIC
    DmaReq.DmaRxReqLev_8	[23:16] RDREQ
    DmaReq.DmaTxPanicLev_8	[15:8]  TPANIC
    DmaReq.DmaTxReqLev_8	[7:0]   TDREQ

    (WO) = Write-only, (RO) = Read-only, otherwise all fields are read-write.

    Abbreviations appropriate for this context are:
	Cs     Chip Select CS
	Lossi  the LoSSI feature
	Rx     Receive FIFO
	Tx     Transmit FIFO
	Dma    Direct Memory Access
	Irq    Interrupt Request
	Req    Request
	Lev    Level

Field Naming:

    Choose names that are somewhat descriptive and meaningful at the call
    point in user code.  The BCM field names are way too short, and often
    too cryptic or misleading.
    Try to limit name length to 15 characters or less, including the "_1"
    field width numeral.

    Name components typically include the thing they apply to and the
    behavior they control.

    Decide to stick to fairly strict camel-case for things like Cs (chip
    select), even though CS is more common.  With CS the camel-case gets
    kind of weird, e.g. CSPolarity_1, or worse CSpolarity_1, and people have
    no rule to know what it is going to be.

    CsPolarity_3   - Combine all 3 CS Polarity bits into one field, as the
	encoding is pretty common.  Reduce the number of fields.
	[Possible single bit names:  CsPol2_1,CsPol1_1,CsPol0_1]
	Not clear how these work with CsPolarity_1, if at all.
	Having the same base name makes them related when searching.
	Having only the "_3" suffix different seems a bit confusing.
	But the BCS doc IS confusing, and does not clarify how they combine.
	Needs experimentation.
	Note 3 polarity bits, but only 2 physical CS lines.

    CsPolarity_1   - This seems like a global CS polarity, and is controllable
	by DMA, whereas CsPolarity_3 is not.

    RxFullStop_1   - the Rx FIFO full flag.  The "Stop" is a reminder that
	"No further serial data will be sent/received until data is read
	from FIFO."

    RxHalf_1       - The BCM doc is confusing here.  It is likely that it
	means Rx FIFO is half full, but the actual level is not specified.
	Calling it "Part" is more ambiguous and may be less misleading.
	Calling it "HalfFull" is a bit redundant as it is both half full and
	half empty.
	Decide to call it RxHalf_1 to start, and let "Half" be fuzzy.

 ?  TxEmpty_1      - Is more literally correct.  The BCM doc calls it
	"transfer done", referring no more data remain in the Tx FIFO so
	there are no more data bits to send.  But the SPI transaction is
	NOT done, since the CS is not returned to the idle (unselected) state.
	However, the "Transfer Active" control field is also mixed in, so
	the status bit could be 0 with data in Tx FIFO and TA=0.

    IrqRxHalf_1    - Correlate with RxHalf_1

    IrqTxEmpty_1   - Correlate with TxEmpty_1

    RunActive_1    - Is the "Transfer Active" control/status bit.
	It is written by software to put CS into active state.
	With DMA it is cleared when DMA is done.
	Thus it is more of an active run/stop kind of control.  The words
	"Transfer Active" seem like status only, too passive.

    ClearRxTxFifo_2  - to help know which bit is which.
	Probably is common to clear both Rx and Tx, but maybe not.
	Possibly split into two fields, ClearRxFifo_1, ClearTxFifo_1, but that
	is more accessor functions.

Register Classes:  (see rgPwm pwm_design.text)

	rgSpi0_CntlStat
	rgSpi0_Fifo
	rgSpi0_ClkDiv
	rgSpi0_DmaLen
	rgSpi0_Lossi
	rgSpi0_DmaReq

    Each register gets its own class derived from rgRegister.
    Class names concatenate the feature class with the register name.

    Field accessor functions are defined in each register derived class.
    These are named like:  (same as rgUniSpi)

	get_FIELD_N()	get object FIELD value of width N
	put_FIELD_N(V)	set object FIELD value of width N

    The full register operations are inherited from rgRegister class.
    These are:

	addr()		return address of hardware register

	read()		direct read  of hardware register
	write(V)	direct write of hardware register

	get()		get object register value
	put(V)		put value into object register

	grab()		copy hardware register into object
	push()		copy object into hardware register

	Another name for "grab" is "pull", but I like the quirkyness of "grab".


----------------------------------------------------------------------------
## rgSpi0 Object - SPI0 Master
----------------------------------------------------------------------------

Object data:
{
    volatile unsigned	*GpioBase;	// IO base address

    rgSpi0_CntlStat	CntlStat	// CS    Control and Status
    rgSpi0_Fifo		Fifo		// FIFO  TX and RX FIFOs
    rgSpi0_ClkDiv	ClkDiv		// CLK   Clock Divider
    rgSpi0_DmaLen	DmaLen		// DLEN  DMA Data Length
    rgSpi0_Lossi	Lossi		// LTOH  LoSSI mode Control
    rgSpi0_DmaReq	DmaReq		// DC    DMA DREQ Controls
}

Methods:

    get_base_addr()		GpioBase address

			Object state operations:
    init_put_reset()		Object registers set to power-on reset state.
 ?  init_put_zero()		Object registers set to zero.

    grab_regs()			Read all registers (not Fifo) into object.
    push_regs()			Write object to hardware registers (not Fifo).

			Direct low-level access:

				Read-only selected bits..
 ?  read_TxHasSpace_1()
 ?  read_RxHasData_1()

			Direct control:  (modify register fields)
 ?  clear_fifos()		Set ClearRxTxFifo_2, then wait for not busy??
 ?  write_RunActive_1(V)

 ?  get_as_Fifo()		Get config word to write Fifo when RunActive_1=0

			Field accessors of object state:
				All these have both get_() and put_(V).

				rgSpi0_CntlStat

    CntlStat.get_LossiWord_1()		[25]
    CntlStat.get_LossiDmaEn_1()		[24]

    CntlStat.get_CsPolarity_3()		[23:21]

    CntlStat.get_RxFullStop_1()		[20]
    CntlStat.get_RxHalf_1()		[19]
    CntlStat.get_TxHasSpace_1()		[18]
    CntlStat.get_RxHasData_1()		[17]
    CntlStat.get_TxEmpty_1()		[16]

    CntlStat.get_LossiEnable_1()	[13]
    CntlStat.get_ReadEnable_1()		[12]
    CntlStat.get_DmaEndCs_1()		[11]
    CntlStat.get_IrqRxHalf_1()		[10]
    CntlStat.get_IrqTxEmpty_1()		[9]
    CntlStat.get_DmaEnable_1() 		[8]
    CntlStat.get_RunActive_1()		[7]
    CntlStat.get_CsPolarity_1()		[6]
    CntlStat.get_ClearRxTxFifo_2() 	[5:4]
    CntlStat.get_ClockPolarity_1()	[3]
    CntlStat.get_ClockPhase_1()		[2]
    CntlStat.get_ChipSelectN_2()	[1:0]

				rgSpi0_ClkDiv

    ClkDiv.get_ClockDiv_16()		[15:0]

				rgSpi0_DmaLen

    DmaLen.get_DmaDataLen_16()		[15:0]

				rgSpi0_Lossi

    Lossi.get_LossiHoldDly_4()		[3:0]

				rgSpi0_DmaReq

    DmaReq.get_DmaRxPanicLev_8()	[31:24]
    DmaReq.get_DmaRxReqLev_8()		[23:16]
    DmaReq.get_DmaTxPanicLev_8()	[15:8]
    DmaReq.get_DmaTxReqLev_8()		[7:0]

