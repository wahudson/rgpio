2019-11-18
		rgpio - PWM (Pulse Width Modulator) Design
		------------------------------------------

Raspberry Pi GPIO Tool and Library

See also:  doc/architecture.text

References:
-----------
BCM2835 ARM Peripherals
    Referenced by RaspberryPi.
    https://www.raspberrypi.org/documentation/hardware/raspberrypi/bcm2835/BCM2835-ARM-Peripherals.pdf

https://elinux.org/BCM2835_datasheet_errata

See:  p.138-147  ch 9. Pulse Width Modulator

----------------------------------------------------------------------------
## Discussion - Pulse Width Modulator
----------------------------------------------------------------------------

Possible Class Names:
 >  rgPwm		better fits camel-case style
    rgPWM

Documentation:
    Where to put detailed documentation on PWM operation and configuration?
    Man page sections:

    rgPwm(7)      - describes BCM hardware function
    rgPwm(3)      - describes librgpio API calls, and limited function
    rgpio_pwm(1)  - describes rgpio pwm command

    Probably want a single source describing operation, rgPwm(7).  The
    Library, and the utility 'rgpio' command both do the same operations, and
    thus have a lot of overlap.  Let them both reference rgPwm(7) for
    hardware behavior.

Operation with rgpio:
    A) Use only base field name
	% rgpio pwm  --Ch1UseFifo_1=1

    B) Use register prefix.  The dot looks good.
	% rgpio pwm  --Cntl.Ch1UseFifo_1=1

----------------------------------------------------------------------------
## Operation - Pulse Width Modulator
----------------------------------------------------------------------------

    Two output channels, almost fully independent.  They share an 8-entry
    by 32-bit FIFO.  When one channel does not use the FIFO, they are
    fully independent.

    The clock source comes from the PWM Clock Manager, which is nearly
    identical to the General Purpose clocks.

    Each channel can operate in one of three modes of operation.

    The data pattern or integer N can come from Data Register or FIFO.
    The Range register always specifies integer M.

    A) PWM mode.

	The idea is to output a pulse train with a duty cycle of (N / M), with
	pulses evenly distributed, on average, in a range of M clock cycles,
	where N and M are unsigned integers and N < M.
	On average, the output will have N cycles high, and the remainder
	(M - N) cycles low.

	A simple algorithm distributes the N high cycles uniformly over the
	range M.  Here x is the integer state or context.
	[Deduced from incomplete description in BCM doc p.139]

		x = 0			# maybe output 1?
		for each clock cycle do {
		    x = x + N
		    if ( x >= M ) {
			x = x - M
			output 1
		    }
		    else {
			output 0
		    }
		}

	The output pattern repeats at least every M clock clock cycles,
	and may be shorter if M is an integer multiple N.

	Require (N <= M), otherwise x grows without bound.

	N = 1, M= 4
	x    0 1 2 3 0
	Out  -,0 0 0 1,0 0 0 1,0 0 0 1

	N = 2, M= 5
	x    0 2 4 1 3 0
	Out  -,0 0 1 0 1,0 0 1 0 1,0 0 1 0 1

	N = 3, M= 5
	x    0 3 1 4 2 0
	Out  -,0 1 0 1 1,0 1 0 1 1,0 1 0 1 1

	N = 4, M= 5
	x    0 4 3 2 1 0
	Out  -,0 1 1 1 1,0 1 1 1 1,0 1 1 1 1

	N = 5, M= 5
	x    0 0 0 0 0 0
	Out  -,1 1 1 1 1,1 1 1 1 1,1 1 1 1 1

	N = 6, M= 5
	x    0 1 2 3 4 5 6 7 ...	grows until overflow
	Out  -,1 1 1 1 1 1 1 ...

	N = 2, M= 6
	x    0 2 4 0 2 4 0 2 4 0 2 4 0
	Out  -,0 0 1 0 0 1,0 0 1 0 0 1,


    B) MS Mark/Space mode.

	Simply output N high clocks, followed by (M - N) low clocks.  ???

	[What happens when N > M ?]  ???


		  <------------ M Range ---------->
		  <---- N ----->
		   ____________                    ____________
	Out  _____|            |__________________|            |________


    C) Serializer mode.

	Data pattern is shifted out, one bit per clock cycle, MSB (Most
	Significant Bit) first.  [BCM doc p.142]
	Data is taken as 32-bit words from the Data register, or Fifo.  ???

	The data is repeated every M clock cycles, truncated or zero-padded
	with the idle-bit value, depending on range M.

		  <------------ M Range ---------->
		  < Data bits >

	Out  _____|XXXXXXXXXXXX|__________________|XXXXXXXXXXXX|________


    Note Mark/Space mode can make a very low frequency clock since M, and N,
    are 32-bit numbers.

----------------------------------------------------------------------------
## Class Design - Pulse Width Modulator
----------------------------------------------------------------------------

    Names of registers and bit-fields in the BCM documentation are rather
    short and confusing when out of context.  Choose better names that are
    more meaningful at the program call point.

Register Names:

    rgSpi0		BCM	Description
    ------------	----	------------------
    Cntl		CTL	Control
    Stat		STA	Status
    DmaConf		DMAC	DMA Configuration
    Fifo		FIF1	Fifo input (WO),  FifoOut,  FifOut,  OutFifo
    Ch1Range		RNG1
    Ch1Data		DAT1
    Ch2Range		RNG2
    Ch2Data		DAT2

    Register names are public objects derived from base class rgRegister.
    Thus want good name choices when viewed at the user call point.

    There are two channels with separate Range and Data registers, but
    shared Control, Status and Fifo registers.  The shared registers makes
    it virtually impossible to make two instances of one PWM class.

    BCM document typically prefixes their names with "PWM_".
    No global prefix is needed here because the use is qualified by the class.

Register Channel Naming:

    Need a way to identify the two channels.  The BCM doc uses a simple
    numeric suffix {1,2}, but this gets confusing with other uses of a
    trailing numeral.

    A) Trailing numeral:  Range1, Range2
	- Not clear number is a channel.

    B) Trailing letter:  RangeA, RangeB
	+ Not confused with trailing numerals.
	-- Does not match signal names in GPIO function select.

 >  C) Ch1Range
	+ Clear channel number.
	+ Prefix groups registers of a channel together.

    D) RangeCh1
	+ Clear channel number.
	- Channel number seems like an after thought.

Field Channel Naming:

    Field channel naming has the same problems.
    Using "Ch1" is more clear it is a channel number.

    A) StateCh2_1	suffix
	- Seems awkward in context of all fields
	Cntl.MsModeCh2_1
	Cntl.UseFifoCh2_1
	Cntl.PolarityCh2_1
	Cntl.SilenceCh2_1

    B) Ch2State_1	prefix
	+ Groups each channel together
	- The field function is harder to recognize.

 >  C) Ch2_State_1	prefix with underscore
	+ Underscore is a little easier to read
	- Is not pure camel-case, breaking convention.

Field Names:

    The Ch*Range and Ch*Data registers are all a single 32-bit field, so need
    no field names.

     Reg.Field			Bits  BCM	possible alternatives
    ----.---------------	----  -----
    Cntl.Ch2_MsEnable_1		[15]  MSEN2	Ch2_MsMode_1
    Cntl.Ch2_UseFifo_1		[13]  USEF2
    Cntl.Ch2_Polarity_1		[12]  POLA2
    Cntl.Ch2_IdleBit_1		[11]  SBIT2	Ch2_Silence_1
    Cntl.Ch2_Repeat_1		[10]  RPTL2	Ch2_RepeatLast_1
    Cntl.Ch2_SerMode_1		[9]   MODE2	Ch2_PwmSerial_1  Ch2_ModeSer_1
    Cntl.Ch2_Enable_1		[8]   PWEN2

    Cntl.ClearFifo_1		[6]   CLRF1  (WO)

    Cntl.Ch1_MsEnable_1		[7]   MSEN1
    Cntl.Ch1_UseFifo_1		[5]   USEF1
    Cntl.Ch1_Polarity_1		[4]   POLA1
    Cntl.Ch1_IdleBit_1		[3]   SBIT1
    Cntl.Ch1_Repeat_1		[2]   RPTL1
    Cntl.Ch1_SerMode_1		[1]   MODE1
    Cntl.Ch1_Enable_1		[0]   PWEN1

    Stat.Ch4_Active_1		[12]  STA4   (RO)
    Stat.Ch3_Active_1		[11]  STA3   (RO)
    Stat.Ch2_Active_1		[10]  STA2   (RO)	Ch2_State_1
    Stat.Ch1_Active_1		[9]   STA1   (RO)
    Stat.BusError_1		[8]   BERR		BusErr_1
    Stat.Ch4_GapErr_1		[7]   GAPO4
    Stat.Ch3_GapErr_1		[6]   GAPO3
    Stat.Ch2_GapErr_1		[5]   GAPO2
    Stat.Ch1_GapErr_1		[4]   GAPO1
    Stat.FifoReadErr_1		[3]   RERR1
    Stat.FifoWriteErr_1		[2]   WERR1
    Stat.FifoEmpty_1		[1]   EMPT1
    Stat.FifoFull_1		[0]   FULL1

    DmaConf.DmaEnable_1		[31]    ENAB
    DmaConf.DmaPanicLev_8	[15:8]  PANIC
    DmaConf.DmaReqLev_8		[7:0]   DREQ

    (WO) = Write-only, (RO) = Read-only, otherwise all fields are read-write.

    Note:  Cntl[14] is Reserved, is where Ch2_ClearFifo_1 would have been.
    Note:  Ch3 and Ch4 probably are non-functional, likely left over from a
    previous chip design.  Treat as reserved.

Field Naming:

    Choose names that are somewhat descriptive and meaningful at the call
    point in user code.  The BCM field names are way too short, and often
    too cryptic or misleading.
    Try to limit name length to 15 characters or less, including the "_1"
    field width numeral.

    Name components typically include the thing they apply to and the
    behavior they control.

    Abbreviations appropriate for this context are:
    Pwm    Pulse Width Modulator
    Ser    Serializer mode
    Ms     Mark Space mode
    Err    Error
    Dma    Direct Memory Access
    Req    Request
    Lev    Level
    Ch1    Channel 1
    Ch2    Channel 2

    Decide to stick to fairly strict camel-case for things like Dma, even
    though DMA is more common.

    Ch2_MsEnable_1  -
    Ch2_SerMode_1   -
	Two Mode bits encode 3 modes:
	MSEN2:  1= Mark Space, 0= PWM  -- select PWM algorithm
	MODE2:  1= Serializer ignore MSEN2, 0= use MSEN2

	MsEnable	MsPwm	MsMode
	SerMode			ModeSer

	In some sense, PWM is the default mode (both zero).  Thus it makes
	sense to think of enabling the other two modes implies not PWM.

	A 2-bit field would make good sense, encoding 4 modes, but numeric
	values for the modes are not obvious.  And the two single bit fields
	are not adjacent making a more complex translation.

	Using the function names for both levels, e.g. MsPwm, seems helpful,
	but not clear which function is the zero level.

	Seems best to just name the function that is the 1 value.

    Ch2_IdleBit_1   - Doc calls it a Silence bit.  Idle seems like a better
	description.

    Err fields - All operate similarly.  1= error status.  Clear by writing
	1.  Writing 0 does nothing.

    Ch2_GapErr_1    - Gap in output of data from Fifo.  Is an error flag.

    Ch2_Active_1    - Name what the state is, 1= active, 0= not.

Function Names:

    All register and field accessor functions are methods of each register
    object.

    The full register operations are inherited from rgRegister class.
    These are:

	addr()		return address of hardware register

	read()		direct read  of hardware register
	write(V)	direct write of hardware register

	get()		get object register value
	put(V)		put value into object register

	grab()		copy hardware register into object
	push()		copy object into hardware register

    Another name for "grab" is "pull", but I like the quirkyness of "grab".

    Field accessor functions are defined in each register derived class.
    A single class can be made for the two register channels (nice!).
    These are named like:  (same as rgUniSpi)

	get_FIELD_N()	get object FIELD value of width N
	put_FIELD_N(V)	set object FIELD value of width N

----------------------------------------------------------------------------
## rgPwm Object - Pulse Width Modulator
----------------------------------------------------------------------------

Object data:
{
    volatile unsigned	*GpioBase;	// IO base address

    rgPwm_Cntl		Cntl;		// CTL   Control
    rgPwm_Stat		Stat;		// STA	Status
    rgPwm_DmaConf	DmaConf;	// DMAC	DMA Configuration
    rgPwm_Fifo		Fifo;		// FIF1	Fifo input (WO)
    rgPwm_Range		Ch1Range;	// RNG1
    rgPwm_Data		Ch1Data;	// DAT1
    rgPwm_Range		Ch2Range;	// RNG2
    rgPwm_Data		Ch2Data;	// DAT2
}

Methods:

    get_base_addr()		GpioBase address

			Object state operations:
    init_put_reset()		Object registers set to power-on reset state.
 ?  init_put_zero()		Object registers set to zero.

    grab_regs()			Read all registers (not Fifo) into object.
    push_regs()			Write object to hardware registers (not Fifo).


    All these have both get_() and put_(V):
			Field accessors of object state:
    get_()
    put_(V)
    ...

	rgPwm_Cntl

    Cntl.get_Ch2_MsEnable_1()	[15]
    Cntl.get_Ch2_UseFifo_1()	[13]
    Cntl.get_Ch2_Polarity_1()	[12]
    Cntl.get_Ch2_IdleBit_1()	[11]
    Cntl.get_Ch2_Repeat_1()	[10]
    Cntl.get_Ch2_SerMode_1()	[9]
    Cntl.get_Ch2_Enable_1()	[8]

    Cntl.get_ClearFifo_1()	[6]   (WO)

    Cntl.get_Ch1_MsEnable_1()	[7]
    Cntl.get_Ch1_UseFifo_1()	[5]
    Cntl.get_Ch1_Polarity_1()	[4]
    Cntl.get_Ch1_IdleBit_1()	[3]
    Cntl.get_Ch1_Repeat_1()	[2]
    Cntl.get_Ch1_SerMode_1()	[1]
    Cntl.get_Ch1_Enable_1()	[0]

	rgPwm_Stat

    Stat.get_Ch4_Active_1()	[12]  (RO)
    Stat.get_Ch3_Active_1()	[11]  (RO)
    Stat.get_Ch2_Active_1()	[10]  (RO)
    Stat.get_Ch1_Active_1()	[9]   (RO)
    Stat.get_BusError_1()	[8]
    Stat.get_Ch4_GapErr_1()	[7]
    Stat.get_Ch3_GapErr_1()	[6]
    Stat.get_Ch2_GapErr_1()	[5]
    Stat.get_Ch1_GapErr_1()	[4]
    Stat.get_FifoReadErr_1()	[3]
    Stat.get_FifoWriteErr_1()	[2]
    Stat.get_FifoEmpty_1()	[1]
    Stat.get_FifoFull_1()	[0]

	rgPwm_DmaConf

    DmaConf.get_DmaEnable_1()	[31]
    DmaConf.get_DmaPanicLev_8()	[15:8]
    DmaConf.get_DmaReqLev_8()	[7:0]

