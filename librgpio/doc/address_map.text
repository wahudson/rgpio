2024-05-30  William A. Hudson

		Address Map - rgAddrMap class design
		------------------------------------

See also:
    architecture.text		original rgAddrMap development
    extend_rpi5.text		changes needed for RPi5
    rgAddrMap(3)  manpage

This file focuses on changes needed for RPi5.  It relies on the above
for background and original development.

----------------------------------------------------------------------------
## RPi4 and Earlier
----------------------------------------------------------------------------

Git tag:  v0.22.0  88e72823bc  2024-03-12

    The rgAddrMap was one of the earliest classes created in the library.
    It was before rgRpiRev took over the platform identification.
    It had an override mechanism for BaseAddr.

    RPi3 and earlier all Features were in a 4k Block.
    RPi4 introduced sub-page Features.
    RPi5 introduced a 16k Block containing 4 Atomic register addresses.

----------------------------------------------------------------------------
## Extension for RPi5
----------------------------------------------------------------------------

Major Changes include:

    Documentation address has a new base address.

    Real IO address is now 64-bit.

    Each Feature needs a 16k block for the Atomic register access.

----------------------------------------------------------------------------
## Memory Mapped IO - 32/64-bit Operating System (OS)
----------------------------------------------------------------------------

    The mmap(2) system call is used to map pages of /dev/mem into our
    process virtual address space, and is the fundamental method to access
    the Gpio peripheral registers.

    Device-special file  /dev/mem  represents all of the processor real
    (physical) memory space.

    On RPi4 and earlier, the real base address (BaseAddr) of the Gpio was a
    32-bit number.
    On RPi5, this changed to a 37-bit number  0x1f00000000, and needs a
    64-bit integer to hold it.

    Declaration:  (from mmap(2) man page)

	void  *mmap(
	    void	*addr,	// NULL for kernel to choose the address
	    size_t	length,	// map length
	    int		prot,	// memory protection flags
	    int		flags,	// mapping visibility to other processes
	    int		fd,	// open file descriptor to map
 >	    off_t	offset	// offset, a multiple of the page size
	);

    Our call:

	int64_t		real_addr;	// RPi real address

	mem_block = mmap(
	    NULL,                  // Any address in our space will do
	    BlockSize,             // Map length
	    PROT_READ|PROT_WRITE,  // Enable reading & writing to mapped memory
	    MAP_SHARED,            // Shared with other processes
	    Dev_fd,                // File descriptor to map
 >	    real_addr              // Offset to GPIO peripheral, page aligned
	);

Problem:
    On RPi5 32-bit OS, the mmap() offset argument is type 'off_t', and
	sizeof( off_t ) = 4  char (32-bits)
    which is not big enough for the BaseAddr=0x1f00000000.

    When the 64-bit real_addr is passed to the mmap() 32-bit argument offset,
    the upper 32-bits are lost.  This is standard C-language behavior, and
    the compiler does not issue a warning.
    Thus we have a silent mistake on RPi5 with 32-bit OS.

    There is a mmap2() system call, which would work well, but the compiler
    reports it as not declared.

Explore:  (see:  test/hand_mmap/test.cpp)
    Run "g++ -E" to see preprocessed code.
    Look for the mmap() declaration, hoping to also find a mmap2().
    Discovered another mmap64() declaration.

	% g++ -Wall -E test.cpp | less
	...
	# 57 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
	extern void *mmap (void *__addr, size_t __len, int __prot,
	     int __flags, int __fd, __off_t __offset) throw ();

	# 70 "/usr/include/x86_64-linux-gnu/sys/mman.h" 3 4
	extern void *mmap64 (void *__addr, size_t __len, int __prot,
	       int __flags, int __fd, __off64_t __offset) throw ();

    It has a man page, that comes up as mmap(2).
    This looks like what we want, probably replaces the mmap2() system call.

    Indeed, we find on a RPi4 32-bit OS:
	+ getpagesize()     = 4096
	+ sizeof( char* )   = 4
	+ sizeof( off_t )   = 4
	+ sizeof( off64_t ) = 8

Solution:
    Use mmap64(), which has a 64-bit offset argument (off64_t type) on
    a 32-bit OS.  This allows the library to remain 32-bit, i.e. not
    require a 64-bit OS on RPi5.

    We apply an extra check on the offset argument size:

	int64_t		real_addr;	// RPi real address
	off64_t		offset_addr;	// mmap() offset argument type

	offset_addr = real_addr;	// may loose upper bits

	if ( offset_addr != real_addr ) {
	    std::ostringstream	css;
	    css << "rgAddrMap:  require 64-bit mmap:  sizeof(off64_t)="
		<< sizeof( off64_t )
		<< ", real_addr=0x" <<hex << real_addr;
	    throw std::domain_error ( css.str() );
	    // This should never happen with mmap64(), except by mistake.
	}

    The idea is to simulate the mmap64() offset argument passing with an
    equivalent assignment statement.

    The test should never fail with off64_t.
    However it would fail if we used mmap() off_t, which changes size
    depending on 32/64-bit OS.

    Essentially we check for an unexpected condition because the consequences
    can be extreme and hard to debug, i.e. the map is wrong and unknown parts
    of memory could be written, corrupting user processes or the OS.
    [We have root permission to read/write anywhere in /dev/mem.]

    Note:  off64_t is a signed integer type, so we also make real_addr a
    signed integer for the comparison.

Another Check Idea:  (not used)

    // Check mmap() offset argument size.
    if ( (sizeof( off_t ) < 8) && ((real_addr >> 32) != 0) ) {
	std::ostringstream      css;
	css << "rgAddrMap:  require 64-bit OS:  sizeof(off_t)="
	    << sizeof( off_t )
	    << ", real_addr=0x" <<hex << real_addr;
	throw std::domain_error ( css.str() );
    }

    Uses 64-bit shift operation.  May not be efficient on 32-bit hardware.

----------------------------------------------------------------------------
## Mapped Address Cache
----------------------------------------------------------------------------

    The rgAddrMap::get_mem_block() function does the actual mmap(2) system
    call to map a block of real memory IO space into the users process.
    It take an IO documentation address, which it translates into a real
    memory address.

    A key feature is that it will return the same user process (virtual)
    address for the same IO address.  This is done using the std::map class
    container template, which maintains an ordered list of <key,value> pairs.
    Essentially each mapped address is stored in this container.

    In the original design, it made sense to let the key be the uint32_t
    real IO address, and the value be the user process virtual address.
    This worked great on RPi4 and earlier, but on RPi5 a 64-bit real IO
    address was needed.  When the key was changed to uint64_t, the compiler
    gave a big warning on the 64-bit key in  std::map<uint64_t,void*>.
    [At least on a 32-bit OS]  (See:  Bugs RPi5 2024-05-31 below.)

    This issue can be simply side-stepped:  Use the 32-bit IO documentation
    address as the key.
    In some sense this is even better, because the container then holds the
    user provided documentation address instead of the mostly hidden real
    address.  This worked great!

Change from original real address key:  (2024-06-04)

<   std::map<uint64_t,void*>  BlkCache;     // cache of mapped memory blocks
>   std::map<uint32_t,void*>  BlkCache;     // cache of mapped memory blocks

<   void*&		cache_ref = BlkCache[r_addr];
>   void*&		cache_ref = BlkCache[bcm_addr];

    The real address and documentation address have a one-to-one
    correspondence, and the 32-bit documentation address saves container
    resources.

----------------------------------------------------------------------------
## Fake Memory flag:  rgAddrMap::FakeMem
----------------------------------------------------------------------------

    The FakeMem flag is intended to indicate that Fake Memory is being used,
    independent of the BaseAddr value.
	FakeMem:   1= using fake memory, 0= not.
	BaseAddr:  0= fake memory, otherwise not.

    Both these values are automatically derived by rgRpiRev.

    There is no accessor to directly set FakeMem.  Instead, a null file name
    passed to  open_dev_file()  will set FakeMem=1.

    Note there are two closely related things named BaseAddr:
	uint64_t		rgAddrMap::BaseAddr;	// real IO base address
	rgRpiRev_Base		rgRpiRev::BaseAddr;	// derivation object

Constructor:
    BaseAddr  =   rgRpiRev::Global.BaseAddr.find();
    FakeMem   = ! rgRpiRev::Global.RevCode.find_realpi();

    Derive both from rgRpiRev global data, which also has override and
    simulate capability.

Override:
    The  rgAddrMap  has an override function to set BaseAddr, for when
    the user knows a better value or the  rgRpiRev  derivation is wrong:
	config_BaseAddr( 0x20000000 )

    This function should also set the corresponding value for FakeMem.

RPi4 and earlier:  librgpio version v0.21.0

    The rgAddrMap constructor initialized:
	FakeMem  = 0;		// using real memory
	BaseAddr = rgRpiRev::find_BaseAddr();

    Thus the FakeMem flag only loosely followed BaseAddr.
    Originally BaseAddr was initialized to a real address constant, so it
    made sense to also set FakeMem=0.  With the addition of rgRpiRev deriving
    the BaseAddr, FakeMem was somewhat overlooked.

----------------------------------------------------------------------------
## Code Learnings:
----------------------------------------------------------------------------

Accessor functions same name for get and put:  2024-06-01
    e.g.
	config_BaseAddr();		// get
	config_BaseAddr( 0x3f000000 );	// put

    Using the same function name for both seems like a nifty feature of C++,
    so I tried it.  Note it still required two function declarations.

    When looking at user code (e.g. t_rgAddrMap/test.cpp) it is confusing
    trying to see the places where put vs get was done.  e.g. A simple
    search finds both and must look closer to see the difference.

    Now I think separate names would be much better:
	get_BaseAddr();
	put_BaseAddr( 0x3f000000 );

----------------------------------------------------------------------------
## Validation
----------------------------------------------------------------------------

How do we know if the mapped address is correct?

    A) Read a register and compare value against another known source.
	Use a previously validated version of rgpio.
	Essentially run two versions of rgpio side-by-side.

    B) Operate hardware and see expected behavior.
	e.g.
	For RPi5 RioIn and RioInSync should virtually always be the same.
	Set Gpio input voltage and read it out.
	Write Gpio output and see pin level change.

    C) Read OTP register for revision code, and compare against /proc/cpuinfo.
	Maybe...

----------------------------------------------------------------------------
## Bugs RPi5 2024-05-31
----------------------------------------------------------------------------

First turn-on of rgpio on RPi5.
    These are some initial problems associated with rgAddrMap.
    Resolution details are explained elsewhere.

Context:
    RPi5, OS is 32-bit.

    % uname -a
	Linux rpiFive 6.6.20+rpt-rpi-v8 #1 SMP PREEMPT Debian 1:6.6.20-1+rpt1 \
	(2024-03-07) aarch64 GNU/Linux
    % lsb_release -a
	Description:    Raspbian GNU/Linux 12 (bookworm)

1)
Compiler warning on 64-bit key in  std::map<uint64_t,void*>

    Giant error (warning?) message:

    % make
    g++ -Wall  -std=c++11 -o ../obj/rgAddrMap.o  -c rgAddrMap.cpp

    In file included from /usr/include/c++/12/map:61,
		     from rgAddrMap.cpp:12:
    /usr/include/c++/12/bits/stl_map.h: In member function \
    'std::map<_Key, _Tp, _Compare, _Alloc>::mapped_type& \
    std::map<_Key, _Tp, _Compare, _Alloc>::operator[](const key_type&) \
    [with _Key = long long unsigned int; \
    _Tp = void*; \
    _Compare = std::less<long long unsigned int>; \
    _Alloc = std::allocator<std::pair<const long long unsigned int, void*> >]':
    /usr/include/c++/12/bits/stl_map.h:511:44: note: parameter passing for \
    argument of type \
    'std::_Rb_tree<long long unsigned int, \
	std::pair<const long long unsigned int, void*>, \
	std::_Select1st<std::pair<const long long unsigned int, void*> >, \
	std::less<long long unsigned int>, \
	std::allocator<std::pair<const long long unsigned int, void*> > \
    >::const_iterator' \
    changed in GCC 7.1
      511 | __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
	  |       ~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      512 |                                   std::tuple<const key_type&>(__k),
	  |                                   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
      513 |                                   std::tuple<>());
	  |                                   ~~~~~~~~~~~~~~~

    ...  (and 2 more similar messages)

    I added the "\<new-line>" to make it a little more readable.
    Seems to still make a usable rgAddrMap.o file.
    Not clear what "changed in GCC 7.1" really means.
    Clearly the uint64_t (long long unsigned int) is being applied in the key.
    Seems like some issue in the <map> library with <long long unsigned int>.

    Message occurs on:
    RPi3:
	% uname -a
	Linux rpiTouch 6.1.21-v7+ #1642 SMP Mon Apr  3 17:20:52 BST 2023 \
	    armv7l GNU/Linux
	% cat /etc/os-release
	PRETTY_NAME="Raspbian GNU/Linux 11 (bullseye)"
	% gcc --version
	gcc (Raspbian 10.2.1-6+rpi1) 10.2.1 20210110

    Does not occur on:
	% uname -a
	Linux wah-Folio9470m 4.15.0-112-generic #113-Ubuntu SMP \
	    Thu Jul 9 23:41:39 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux
	% cat /etc/os-release
	NAME="Ubuntu"
	VERSION="18.04.6 LTS (Bionic Beaver)"
	% gcc --version
	gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0

    Fix:  Use the 32-bit IO documentation address as the key, avoiding
	the need for a 64-bit key.
	See:  "Mapped Address Cache" above.

2)
Device file /dev/gpiomem  does not exist.

    Fix:  Test for both  /dev/gpiomem  existed on RPi4 and earlier, and
	/dev/gpiomem0  exists on RPi5.

3)
Stuck on fake memory:  rgAddrMap::FakeMem

    A bug in constructor  rgAddrMap::rgAddrMap()  accidentally set
	FakeMem = rgRpiRev::Global.RevCode.find_realpi();
    which is exactly inverted.
    This broke rgpio for all version of RPi.

    Fix constructor:
	< FakeMem   =   rgRpiRev::Global.RevCode.find_realpi();
	> FakeMem   = ! rgRpiRev::Global.RevCode.find_realpi();

    Fix config_BaseAddr(v) to also clear FakeMem:
	< if ( ! addr ) { FakeMem = 1; }
	> FakeMem  = ( 0 == addr );

